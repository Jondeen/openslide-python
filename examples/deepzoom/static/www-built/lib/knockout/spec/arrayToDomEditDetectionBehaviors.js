(function(e){var t;define([],function(){return function(){function e(e){var t=[];for(var n=0;n<e.childNodes.length;n++)t.push(e.childNodes[n]);return t}describe("Array to DOM node children mapping",function(){beforeEach(jasmine.prepareTestNode),it("Should populate the DOM node by mapping array elements",function(){var e=["A","B"],t=function(e){var t=document.createElement("DIV"),n=document.createElement("DIV");return t.innerHTML=e+"1",n.innerHTML=e+"2",[t,n]};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,e,t),expect(testNode.childNodes.length).toEqual(4),expect(testNode.childNodes[0].innerHTML).toEqual("A1"),expect(testNode.childNodes[1].innerHTML).toEqual("A2"),expect(testNode.childNodes[2].innerHTML).toEqual("B1"),expect(testNode.childNodes[3].innerHTML).toEqual("B2")}),it("Should only call the mapping function for new array elements",function(){var e=[],t=function(t){return e.push(t),null};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","B"],t),expect(e).toEqual(["A","B"]),e=[],ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","A2","B"],t),expect(e).toEqual(["A2"])}),it("Should retain existing node instances if the array is unchanged",function(){var t=["A","B"],n=function(e){var t=document.createElement("DIV"),n=document.createElement("DIV");return t.innerHTML=e+"1",n.innerHTML=e+"2",[t,n]};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,t,n);var r=e(testNode);ko.utils.setDomNodeChildrenFromArrayMapping(testNode,t,n);var i=e(testNode);expect(i).toEqual(r)}),it("Should insert added nodes at the corresponding place in the DOM",function(){var e=[],t=function(t){e.push(t);var n=document.createElement("DIV");return n.innerHTML=t,[n]};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","B"],t),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["A","B"]),expect(e).toEqual(["A","B"]),e=[],ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["first","A","middle1","middle2","B","last"],t),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["first","A","middle1","middle2","B","last"]),expect(e).toEqual(["first","middle1","middle2","last"])}),it("Should remove deleted nodes from the DOM",function(){var e=[],t=function(t){e.push(t);var n=document.createElement("DIV");return n.innerHTML=t,[n]};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["first","A","middle1","middle2","B","last"],t),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["first","A","middle1","middle2","B","last"]),expect(e).toEqual(["first","A","middle1","middle2","B","last"]),e=[],ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","B"],t),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["A","B"]),expect(e).toEqual([])}),it("Should tolerate DOM nodes being removed manually, before the corresponding array entry is removed",function(){var e=[],t=function(t){e.push(t);var n=document.createElement("DIV");return n.innerHTML=t,[n]};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","B","C"],t),expect(testNode).toContainHtml("<div>a</div><div>b</div><div>c</div>");var n=testNode.childNodes[1];expect(n.innerHTML).toEqual("B"),n.parentNode.removeChild(n),ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","C"],t),expect(testNode).toContainHtml("<div>a</div><div>c</div>")}),it("Should handle sequences of mixed insertions and deletions",function(){var e=[],t=0,n=function(t){e.push(t);var n=document.createElement("DIV");return n.innerHTML=ko.utils.unwrapObservable(t)||"null",[n]},r=function(n,r){++t,expect(e[e.length-1]).toEqual(n)};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A"],n,null,r),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["A"]),expect(e).toEqual(["A"]),expect(t).toEqual(e.length),e=[],t=0,ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["B"],n,null,r),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["B"]),expect(e).toEqual(["B"]),expect(t).toEqual(e.length),e=[],t=0,ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["A","B","C"],n,null,r),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["A","B","C"]),expect(e).toEqual(["A","C"]),expect(t).toEqual(e.length),e=[],t=0,ko.utils.setDomNodeChildrenFromArrayMapping(testNode,["C","B","A"],n,null,r),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["C","B","A"]),expect(e).toEqual([]),expect(t).toEqual(e.length),e=[],t=0;var i=ko.observable(1),s=ko.observable(1),o=function(e,t){s(),r(e,t)};ko.utils.setDomNodeChildrenFromArrayMapping(testNode,[i,null,"B"],n,null,o),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["1","null","B"]),expect(e).toEqual([i,null]),expect(t).toEqual(e.length),e=[],t=0,i(2),expect(ko.utils.arrayMap(testNode.childNodes,function(e){return e.innerHTML})).toEqual(["2","null","B"]),expect(e).toEqual([i]),expect(t).toEqual(e.length),e=[],t=0,s(2),expect(e.length).toEqual(0),expect(t).toEqual(0)})})}.call(e),t})})(this);