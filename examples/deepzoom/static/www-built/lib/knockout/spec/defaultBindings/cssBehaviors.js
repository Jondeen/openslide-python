(function(e){var t;define([],function(){return function(){describe("Binding: CSS classes",function(){beforeEach(jasmine.prepareTestNode),it("Should give the element the specific CSS class only when the specified value is true",function(){var e=new ko.observable,t=new ko.observable(!0);testNode.innerHTML="<div class='unrelatedClass1 unrelatedClass2' data-bind='css: { myRule: someModelProperty, anotherRule: anotherModelProperty }'>Hallo</div>",ko.applyBindings({someModelProperty:e,anotherModelProperty:t},testNode),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 unrelatedClass2 anotherRule"),e(!0),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 unrelatedClass2 anotherRule myRule"),t(!1),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 unrelatedClass2 myRule")}),it("Should give the element a single CSS class without a leading space when the specified value is true",function(){var e=new ko.observable;testNode.innerHTML="<div data-bind='css: { myRule: someModelProperty }'>Hallo</div>",ko.applyBindings({someModelProperty:e},testNode),expect(testNode.childNodes[0].className).toEqual(""),e(!0),expect(testNode.childNodes[0].className).toEqual("myRule")}),it("Should toggle multiple CSS classes if specified as a single string separated by spaces",function(){var e=new ko.observable;testNode.innerHTML="<div class='unrelatedClass1' data-bind='css: { \"myRule _another-Rule123\": someModelProperty }'>Hallo</div>",ko.applyBindings({someModelProperty:e},testNode),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1"),e(!0),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 myRule _another-Rule123"),e(!1),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1")}),it("Should set/change dynamic CSS class(es) if string is specified",function(){var e=new ko.observable("");testNode.innerHTML="<div class='unrelatedClass1' data-bind='css: someModelProperty'>Hallo</div>",ko.applyBindings({someModelProperty:e},testNode),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1"),e("my-Rule"),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 my-Rule"),e("another_Rule  my-Rule"),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 another_Rule my-Rule"),e(undefined),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1")}),it("Should work with any arbitrary class names",function(){var e=new ko.observable;testNode.innerHTML="<div data-bind='css: { \"complex/className complex.className\" : someModelProperty }'>Something</div>",ko.applyBindings({someModelProperty:e},testNode),expect(testNode.childNodes[0].className).toEqual(""),e(!0),expect(testNode.childNodes[0].className).toEqual("complex/className complex.className")});var e=document.createElementNS&&document.createElementNS("http://www.w3.org/2000/svg","svg");it("should update the class of an SVG tag",function(){if(e){var t=ko.observable();testNode.innerHTML="<svg class='Y' data-bind='css: {x: someModelProperty}'></svg>",ko.applyBindings({someModelProperty:t},testNode),expect(testNode.childNodes[0].getAttribute("class")).toEqual("Y"),t(!0),expect(testNode.childNodes[0].getAttribute("class")).toEqual("Y x")}}),it("Should change dynamic CSS class(es) if null is specified",function(){var e=new ko.observable({});testNode.innerHTML="<div class='unrelatedClass1' data-bind='css: someModelProperty'>Hallo</div>",ko.applyBindings({someModelProperty:e},testNode),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1"),e("my-Rule"),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 my-Rule"),e(null),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1"),e("my-Rule"),expect(testNode.childNodes[0].className).toEqual("unrelatedClass1 my-Rule")})})}.call(e),t})})(this);