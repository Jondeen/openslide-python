(function(e){var t;define([],function(){return function(){describe("Binding: Attr",function(){beforeEach(jasmine.prepareTestNode),it("Should be able to set arbitrary attribute values",function(){var e={myValue:"first value"};testNode.innerHTML="<div data-bind='attr: {firstAttribute: myValue, \"second-attribute\": true}'></div>",ko.applyBindings(e,testNode),expect(testNode.childNodes[0].getAttribute("firstAttribute")).toEqual("first value"),expect(testNode.childNodes[0].getAttribute("second-attribute")).toEqual("true")}),it('Should be able to set "name" attribute, even on IE6-7',function(){var e=ko.observable("myName");testNode.innerHTML="<input data-bind='attr: { name: myValue }' />",ko.applyBindings({myValue:e},testNode),expect(testNode.childNodes[0].name).toEqual("myName"),testNode.childNodes[0].outerHTML&&expect(testNode.childNodes[0].outerHTML).toMatch('name="?myName"?'),expect(testNode.childNodes[0].getAttribute("name")).toEqual("myName"),e(!1),expect(testNode.childNodes[0].name).toEqual(""),testNode.childNodes[0].outerHTML&&expect(testNode.childNodes[0].outerHTML).toNotMatch('name="?([^">]+)'),expect(testNode.childNodes[0].getAttribute("name")).toEqual("")}),it("Should respond to changes in an observable value",function(){var e={myprop:ko.observable("initial value")};testNode.innerHTML="<div data-bind='attr: { someAttrib: myprop }'></div>",ko.applyBindings(e,testNode),expect(testNode.childNodes[0].getAttribute("someAttrib")).toEqual("initial value"),e.myprop("new value"),expect(testNode.childNodes[0].getAttribute("someAttrib")).toEqual("new value")}),it("Should remove the attribute if the value is strictly false, null, or undefined",function(){var e={myprop:ko.observable()};testNode.innerHTML="<div data-bind='attr: { someAttrib: myprop }'></div>",ko.applyBindings(e,testNode),ko.utils.arrayForEach([!1,null,undefined],function(t){e.myprop("nonempty value"),expect(testNode.childNodes[0].getAttribute("someAttrib")).toEqual("nonempty value"),e.myprop(t),expect(testNode.childNodes[0].getAttribute("someAttrib")).toEqual(null)})}),it("Should be able to set class attribute and access it using className property",function(){var e={myprop:ko.observable("newClass")};testNode.innerHTML="<div class='oldClass' data-bind=\"attr: {'class': myprop}\"></div>",expect(testNode.childNodes[0].className).toEqual("oldClass"),ko.applyBindings(e,testNode),expect(testNode.childNodes[0].className).toEqual("newClass"),e.myprop(undefined),expect(testNode.childNodes[0].className).toEqual(""),expect(testNode.childNodes[0].getAttribute("class")).toEqual(null)})})}.call(e),t})})(this);