(function(e){var t;define([],function(){return function(){describe("Binding: Enable/Disable",function(){beforeEach(jasmine.prepareTestNode),it("Enable means the node is enabled only when the value is true",function(){var e=new ko.observable;testNode.innerHTML="<input data-bind='enable:myModelProperty()' />",ko.applyBindings({myModelProperty:e},testNode),expect(testNode.childNodes[0].disabled).toEqual(!0),e(1),expect(testNode.childNodes[0].disabled).toEqual(!1)}),it("Disable means the node is enabled only when the value is false",function(){var e=new ko.observable;testNode.innerHTML="<input data-bind='disable:myModelProperty()' />",ko.applyBindings({myModelProperty:e},testNode),expect(testNode.childNodes[0].disabled).toEqual(!1),e(1),expect(testNode.childNodes[0].disabled).toEqual(!0)}),it("Enable should unwrap observables implicitly",function(){var e=new ko.observable(!1);testNode.innerHTML="<input data-bind='enable:myModelProperty' />",ko.applyBindings({myModelProperty:e},testNode),expect(testNode.childNodes[0].disabled).toEqual(!0)}),it("Disable should unwrap observables implicitly",function(){var e=new ko.observable(!1);testNode.innerHTML="<input data-bind='disable:myModelProperty' />",ko.applyBindings({myModelProperty:e},testNode),expect(testNode.childNodes[0].disabled).toEqual(!1)})})}.call(e),t})})(this);