(function(e){var t;define([],function(){return function(){describe("Binding: If",function(){beforeEach(jasmine.prepareTestNode),it("Should remove descendant nodes from the document (and not bind them) if the value is falsey",function(){testNode.innerHTML="<div data-bind='if: someItem'><span data-bind='text: someItem.nonExistentChildProp'></span></div>",expect(testNode.childNodes[0].childNodes.length).toEqual(1),ko.applyBindings({someItem:null},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(0)}),it("Should leave descendant nodes in the document (and bind them) if the value is truthy, independently of the active template engine",function(){this.after(function(){ko.setTemplateEngine(new ko.nativeTemplateEngine)}),ko.setTemplateEngine(new ko.templateEngine),testNode.innerHTML="<div data-bind='if: someItem'><span data-bind='text: someItem.existentChildProp'></span></div>",expect(testNode.childNodes.length).toEqual(1),ko.applyBindings({someItem:{existentChildProp:"Child prop value"}},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(1),expect(testNode.childNodes[0].childNodes[0]).toContainText("Child prop value")}),it("Should leave descendant nodes unchanged if the value is truthy and remains truthy when changed",function(){var e=ko.observable(!0);testNode.innerHTML="<div data-bind='if: someItem'><span></span></div>";var t=testNode.childNodes[0].childNodes[0];ko.applyBindings({someItem:e},testNode),expect(testNode.childNodes[0].childNodes[0].tagName.toLowerCase()).toEqual("span"),expect(testNode.childNodes[0].childNodes[0]).toEqual(t),e("different truthy value"),expect(testNode.childNodes[0].childNodes[0].tagName.toLowerCase()).toEqual("span"),expect(testNode.childNodes[0].childNodes[0]).toEqual(t)}),it("Should toggle the presence and bindedness of descendant nodes according to the truthiness of the value",function(){var e=ko.observable(undefined);testNode.innerHTML="<div data-bind='if: someItem'><span data-bind='text: someItem().occasionallyExistentChildProp'></span></div>",ko.applyBindings({someItem:e},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(0),e({occasionallyExistentChildProp:"Child prop value"}),expect(testNode.childNodes[0].childNodes.length).toEqual(1),expect(testNode.childNodes[0].childNodes[0]).toContainText("Child prop value"),e(null),expect(testNode.childNodes[0].childNodes.length).toEqual(0)}),it("Should not interfere with binding context",function(){testNode.innerHTML="<div data-bind='if: true'>Parents: <span data-bind='text: $parents.length'></span></div>",ko.applyBindings({},testNode),expect(testNode.childNodes[0]).toContainText("Parents: 0"),expect(ko.contextFor(testNode.childNodes[0].childNodes[1]).$parents.length).toEqual(0)}),it('Should be able to define an "if" region using a containerless template',function(){var e=ko.observable(undefined);testNode.innerHTML='hello <!-- ko if: someitem --><span data-bind="text: someitem().occasionallyexistentchildprop"></span><!-- /ko --> goodbye',ko.applyBindings({someitem:e},testNode),expect(testNode).toContainHtml("hello <!-- ko if: someitem --><!-- /ko --> goodbye"),e({occasionallyexistentchildprop:"child prop value"}),expect(testNode).toContainHtml('hello <!-- ko if: someitem --><span data-bind="text: someitem().occasionallyexistentchildprop">child prop value</span><!-- /ko --> goodbye'),e(null),expect(testNode).toContainHtml("hello <!-- ko if: someitem --><!-- /ko --> goodbye")}),it('Should be able to nest "if" regions defined by containerless templates',function(){var e=ko.observable(!1),t=ko.observable(!1);testNode.innerHTML="hello <!-- ko if: condition1 -->First is true<!-- ko if: condition2 -->Both are true<!-- /ko --><!-- /ko -->",ko.applyBindings({condition1:e,condition2:t},testNode),expect(testNode).toContainHtml("hello <!-- ko if: condition1 --><!-- /ko -->"),e(!0),expect(testNode).toContainHtml("hello <!-- ko if: condition1 -->first is true<!-- ko if: condition2 --><!-- /ko --><!-- /ko -->"),t(!0),expect(testNode).toContainHtml("hello <!-- ko if: condition1 -->first is true<!-- ko if: condition2 -->both are true<!-- /ko --><!-- /ko -->")})})}.call(e),t})})(this);