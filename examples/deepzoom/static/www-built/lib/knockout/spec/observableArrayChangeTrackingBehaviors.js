(function(e){var t;define([],function(){return function(){describe("Observable Array change tracking",function(){function e(e,n,r){var i,s=e.subscribe(function(t){expect(e()).toEqual(r.result),i=t},null,"arrayChange");e[n].apply(e,r.args),s.dispose(),i&&i.sort&&i.sort(t),expect(i).toEqual(r.changes)}function t(e,t){return e.index-t.index||e.status.localeCompare(t.status)}function n(e){var t=ko.utils.compareArrays,n=function(){return i.push(Array.prototype.slice.call(arguments,0)),t.apply(this,arguments)},r=[],i=[];for(var s in ko.utils)ko.utils[s]===t&&(r.push(s),ko.utils[s]=n);try{e(i)}finally{for(var o=0;o<r.length;o++)ko.utils[r[o]]=t}}it("Supplies changelists to subscribers",function(){var e=ko.observableArray(["Alpha","Beta","Gamma"]),t;e.subscribe(function(e){t=e},null,"arrayChange"),e.push("Delta"),expect(t).toEqual([{status:"added",value:"Delta",index:3}])}),it("Only computes diffs when there's at least one active arrayChange subscription",function(){n(function(e){var t=ko.observableArray(["Alpha","Beta","Gamma"]),n;t(["Another"]),expect(e.length).toBe(0);var r=t.subscribe(function(e){n=e},null,"arrayChange");t(["Changed"]),expect(e.length).toBe(1),expect(n).toEqual([{status:"deleted",value:"Another",index:0},{status:"added",value:"Changed",index:0}]),r.dispose(),t(["Changed again"]),expect(e.length).toBe(1),t.subscribe(function(e){n=e},null,"arrayChange"),t(["Changed once more"]),expect(e.length).toBe(2),expect(n).toEqual([{status:"deleted",value:"Changed again",index:0},{status:"added",value:"Changed once more",index:0}])})}),it("Reuses cached diff results",function(){n(function(e){var t=ko.observableArray(["Alpha","Beta","Gamma"]),n,r;t.subscribe(function(e){n=e},null,"arrayChange"),t.subscribe(function(e){r=e},null,"arrayChange"),t(["Gamma"]),expect(e.length).toBe(1),expect(n).toEqual([{status:"deleted",value:"Alpha",index:0},{status:"deleted",value:"Beta",index:1}]),expect(r).toBe(n),t(["Delta"]),expect(e.length).toBe(2),expect(n).toEqual([{status:"deleted",value:"Gamma",index:0},{status:"added",value:"Delta",index:0}]),expect(r).toBe(n)})}),it("Skips the diff algorithm when the array mutation is a known operation",function(){n(function(t){var n=ko.observableArray(["Alpha","Beta","Gamma"]),r=[1,2].splice(1).length===1;n.subscribe(function(){},null,"arrayChange"),e(n,"push",{args:["Delta","Epsilon"],result:["Alpha","Beta","Gamma","Delta","Epsilon"],changes:[{status:"added",value:"Delta",index:3},{status:"added",value:"Epsilon",index:4}]}),e(n,"pop",{args:[],result:["Alpha","Beta","Gamma","Delta"],changes:[{status:"deleted",value:"Epsilon",index:4}]}),e(ko.observableArray([]),"pop",{args:[],result:[],changes:undefined}),e(n,"shift",{args:[],result:["Beta","Gamma","Delta"],changes:[{status:"deleted",value:"Alpha",index:0}]}),e(ko.observableArray([]),"shift",{args:[],result:[],changes:undefined}),e(n,"unshift",{args:["First","Second"],result:["First","Second","Beta","Gamma","Delta"],changes:[{status:"added",value:"First",index:0},{status:"added",value:"Second",index:1}]}),e(n,"splice",{args:[2,3,"Another","YetAnother"],result:["First","Second","Another","YetAnother"],changes:[{status:"added",value:"Another",index:2},{status:"deleted",value:"Beta",index:2},{status:"added",value:"YetAnother",index:3},{status:"deleted",value:"Gamma",index:3},{status:"deleted",value:"Delta",index:4}]});if(r)e(n,"splice",{args:[2],result:["First","Second"],changes:[{status:"deleted",value:"Another",index:2},{status:"deleted",value:"YetAnother",index:3}]});else{var i=t.length;n(["First","Second"]),t.splice(i,t.length)}e(n,"splice",{args:[1,50,"X","Y"],result:["First","X","Y"],changes:[{status:"added",value:"X",index:1},{status:"deleted",value:"Second",index:1},{status:"added",value:"Y",index:2}]}),e(n,"splice",{args:[25,3,"New1","New2"],result:["First","X","Y","New1","New2"],changes:[{status:"added",value:"New1",index:3},{status:"added",value:"New2",index:4}]}),e(n,"splice",{args:[-3,2,"Blah","Another"],result:["First","X","Blah","Another","New2"],changes:[{status:"added",value:"Blah",index:2},{status:"deleted",value:"Y",index:2},{status:"added",value:"Another",index:3},{status:"deleted",value:"New1",index:3}]}),e(n,"splice",{args:[0,2,"X","First"],result:["X","First","Blah","Another","New2"],changes:[{status:"added",value:"X",index:0,moved:1},{status:"deleted",value:"First",index:0,moved:1},{status:"added",value:"First",index:1,moved:0},{status:"deleted",value:"X",index:1,moved:0}]}),expect(t.length).toBe(0)})}),it("Should support tracking of any observable using extender",function(){var e=ko.observable(["Alpha","Beta","Gamma"]).extend({trackArrayChanges:!0}),t;e.subscribe(function(e){t=e},null,"arrayChange"),e(["Alpha","Beta","Gamma","Delta"]),expect(t).toEqual([{status:"added",value:"Delta",index:3}]),e(null),expect(t).toEqual([{status:"deleted",value:"Alpha",index:0},{status:"deleted",value:"Beta",index:1},{status:"deleted",value:"Gamma",index:2},{status:"deleted",value:"Delta",index:3}]);var n,r=0;e=e.extend({trackArrayChanges:!0}),e.subscribe(function(e){r++,n=e},null,"arrayChange"),e(["Gamma"]),expect(r).toEqual(1),expect(n).toEqual([{status:"added",value:"Gamma",index:0}]),expect(n).toBe(t)}),it("Should cleanup a single arrayChange dependency",function(){var e=ko.observableArray(),t=e.subscribe(function(){},null,"arrayChange");expect(e.getSubscriptionsCount("arrayChange")).toBe(1),t.dispose(),expect(e.getSubscriptionsCount()).toBe(0)}),it("Should support tracking of a computed observable using extender",function(){var e=ko.observable(["Alpha","Beta","Gamma"]),t=ko.computed(function(){return e().slice(-2)}).extend({trackArrayChanges:!0}),n;expect(t()).toEqual(["Beta","Gamma"]);var r=t.subscribe(function(e){n=e},null,"arrayChange");e(["Alpha","Beta","Gamma","Delta"]),expect(t()).toEqual(["Gamma","Delta"]),expect(n).toEqual([{status:"deleted",value:"Beta",index:0},{status:"added",value:"Delta",index:1}]),r.dispose(),expect(t.getSubscriptionsCount()).toBe(0)}),it("Should support tracking of a pure computed observable using extender",function(){var e=ko.observable(["Alpha","Beta","Gamma"]),t=ko.pureComputed(function(){return e().slice(-2)}).extend({trackArrayChanges:!0}),n;expect(t()).toEqual(["Beta","Gamma"]),expect(e.getSubscriptionsCount()).toBe(0);var r=t.subscribe(function(e){n=e},null,"arrayChange");expect(e.getSubscriptionsCount()).toBe(1),e(["Alpha","Beta","Gamma","Delta"]),expect(t()).toEqual(["Gamma","Delta"]),expect(n).toEqual([{status:"deleted",value:"Beta",index:0},{status:"added",value:"Delta",index:1}]),r.dispose(),expect(e.getSubscriptionsCount()).toBe(0)}),it("Should support recursive updates (modify array within arrayChange callback)",function(){var e={name:"1",nodes:[{name:"1.1",nodes:[{name:"1.1.1",nodes:[]}]},{name:"1.2",nodes:[]},{name:"1.3",nodes:[]}]},t=ko.observableArray([]);t.subscribe(function(e){e=e.slice(0);for(var n=0;n<e.length;n++){var r=e[n];switch(r.status){case"added":t.push.apply(t,r.value.nodes)}}},null,"arrayChange"),t.push(e),expect(t()).toEqual([e,e.nodes[0],e.nodes[1],e.nodes[2],e.nodes[0].nodes[0]])})})}.call(e),t})})(this);