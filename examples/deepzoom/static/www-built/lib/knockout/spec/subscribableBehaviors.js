(function(e){var t;define([],function(){return function(){describe("Subscribable",function(){it("Should declare that it is subscribable",function(){var e=new ko.subscribable;expect(ko.isSubscribable(e)).toEqual(!0)}),it("isSubscribable should return false for undefined",function(){expect(ko.isSubscribable(undefined)).toEqual(!1)}),it("isSubscribable should return false for null",function(){expect(ko.isSubscribable(null)).toEqual(!1)}),it("Should be able to notify subscribers",function(){var e=new ko.subscribable,t;e.subscribe(function(e){t=e}),e.notifySubscribers(123),expect(t).toEqual(123)}),it("Should be able to unsubscribe",function(){var e=new ko.subscribable,t,n=e.subscribe(function(e){t=e});n.dispose(),e.notifySubscribers(123),expect(t).toEqual(undefined)}),it("Should be able to specify a 'this' pointer for the callback",function(){var e={someProperty:123,myCallback:function(e){expect(e).toEqual("notifiedValue"),expect(this.someProperty).toEqual(123)}},t=new ko.subscribable;t.subscribe(e.myCallback,e),t.notifySubscribers("notifiedValue")}),it("Should not notify subscribers after unsubscription, even if the unsubscription occurs midway through a notification cycle",function(){var e=new ko.subscribable,t=e.subscribe(function(){r.dispose()}),n=!1,r=e.subscribe(function(){n=!0});e.notifySubscribers("ignored"),expect(n).toEqual(!1)}),it("Should be able to notify subscribers for a specific 'event'",function(){var e=new ko.subscribable,t=undefined;e.subscribe(function(e){t=e},null,"myEvent"),e.notifySubscribers(123,"unrelatedEvent"),expect(t).toEqual(undefined),e.notifySubscribers(456,"myEvent"),expect(t).toEqual(456)}),it("Should be able to unsubscribe for a specific 'event'",function(){var e=new ko.subscribable,t,n=e.subscribe(function(e){t=e},null,"myEvent");n.dispose(),e.notifySubscribers(123,"myEvent"),expect(t).toEqual(undefined)}),it("Should be able to subscribe for a specific 'event' without being notified for the default event",function(){var e=new ko.subscribable,t,n=e.subscribe(function(e){t=e},null,"myEvent");e.notifySubscribers(123),expect(t).toEqual(undefined)}),it("Should be able to retrieve the number of active subscribers",function(){var e=new ko.subscribable,t=e.subscribe(function(){}),n=e.subscribe(function(){},null,"someSpecificEvent");expect(e.getSubscriptionsCount()).toEqual(2),expect(e.getSubscriptionsCount("change")).toEqual(1),expect(e.getSubscriptionsCount("someSpecificEvent")).toEqual(1),expect(e.getSubscriptionsCount("nonexistentEvent")).toEqual(0),t.dispose(),expect(e.getSubscriptionsCount()).toEqual(1),expect(e.getSubscriptionsCount("change")).toEqual(0),expect(e.getSubscriptionsCount("someSpecificEvent")).toEqual(1),n.dispose(),expect(e.getSubscriptionsCount()).toEqual(0),expect(e.getSubscriptionsCount("change")).toEqual(0),expect(e.getSubscriptionsCount("someSpecificEvent")).toEqual(0)}),it("Should be possible to replace notifySubscribers with a custom handler",function(){var e=new ko.subscribable,t=[];e.subscribe(function(){throw new Error("Should not notify subscribers by default once notifySubscribers is overridden")}),e.notifySubscribers=function(e,n){t.push({eventName:n,value:e})},e.notifySubscribers(123,"myEvent"),expect(t.length).toEqual(1),expect(t[0].eventName).toEqual("myEvent"),expect(t[0].value).toEqual(123)}),it("Should inherit any properties defined on ko.subscribable.fn",function(){this.after(function(){delete ko.subscribable.fn.customProp,delete ko.subscribable.fn.customFunc}),ko.subscribable.fn.customProp="some value",ko.subscribable.fn.customFunc=function(){return this};var e=new ko.subscribable;expect(e.customProp).toEqual("some value"),expect(e.customFunc()).toEqual(e)}),it('Should have access to functions added to "fn" on existing instances on supported browsers',function(){if(!jasmine.browserSupportsProtoAssignment)return;this.after(function(){delete ko.subscribable.fn.customFunction});var e=new ko.subscribable,t=function(){};ko.subscribable.fn.customFunction=t,expect(e.customFunction).toBe(t)})})}.call(e),t})})(this);