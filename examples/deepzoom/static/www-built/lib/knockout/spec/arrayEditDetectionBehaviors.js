(function(e){var t;define([],function(){return function(){describe("Compare Arrays",function(){it("Should recognize when two arrays have the same contents",function(){var e=["A",{},function(){}],t=ko.utils.compareArrays(e,e.slice(0));expect(t.length).toEqual(e.length);for(var n=0;n<e.length;n++)expect(t[n].status).toEqual("retained"),expect(t[n].value).toEqual(e[n])}),it("Should recognize added items",function(){var e=["A","B"],t=["A","A2","A3","B","B2"],n=ko.utils.compareArrays(e,t);expect(n).toEqual([{status:"retained",value:"A"},{status:"added",value:"A2",index:1},{status:"added",value:"A3",index:2},{status:"retained",value:"B"},{status:"added",value:"B2",index:4}])}),it("Should recognize deleted items",function(){var e=["A","B","C","D","E"],t=["B","C","E"],n=ko.utils.compareArrays(e,t);expect(n).toEqual([{status:"deleted",value:"A",index:0},{status:"retained",value:"B"},{status:"retained",value:"C"},{status:"deleted",value:"D",index:3},{status:"retained",value:"E"}])}),it("Should recognize mixed edits",function(){var e=["A","B","C","D","E"],t=[123,"A","E","C","D"],n=ko.utils.compareArrays(e,t);expect(n).toEqual([{status:"added",value:123,index:0},{status:"retained",value:"A"},{status:"deleted",value:"B",index:1},{status:"added",value:"E",index:2,moved:4},{status:"retained",value:"C"},{status:"retained",value:"D"},{status:"deleted",value:"E",index:4,moved:2}])}),it("Should recognize replaced array",function(){var e=["A","B","C","D","E"],t=["F","G","H","I","J"],n=ko.utils.compareArrays(e,t);n.sort(function(e,t){return e.index-t.index||e.status.localeCompare(t.status)}),expect(n).toEqual([{status:"added",value:"F",index:0},{status:"deleted",value:"A",index:0},{status:"added",value:"G",index:1},{status:"deleted",value:"B",index:1},{status:"added",value:"H",index:2},{status:"deleted",value:"C",index:2},{status:"added",value:"I",index:3},{status:"deleted",value:"D",index:3},{status:"added",value:"J",index:4},{status:"deleted",value:"E",index:4}])}),it("Should support sparse diffs",function(){var e=["A","B","C","D","E"],t=[123,"A","E","C","D"],n=ko.utils.compareArrays(e,t,{sparse:!0});expect(n).toEqual([{status:"added",value:123,index:0},{status:"deleted",value:"B",index:1},{status:"added",value:"E",index:2,moved:4},{status:"deleted",value:"E",index:4,moved:2}])})})}.call(e),t})})(this);