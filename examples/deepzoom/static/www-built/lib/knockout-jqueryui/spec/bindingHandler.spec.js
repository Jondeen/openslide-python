(function(e){var t;define(["jquery"],function(n){return function(){(function(){"use strict";describe("The binding handler",function(){var e,t,n;afterEach(function(){t.remove(),delete $.fn.test,delete ko.bindingHandlers.test}),e=function(e,t,n){var r;r=function(){kojqui.BindingHandler.call(this,"test"),this.options=e||[],this.events=t||[],this.hasRefresh=n||!1},r.prototype=kojqui.utils.createObject(kojqui.BindingHandler.prototype),r.prototype.constructor=r,kojqui.utils.register(r)},it("should instantiate the widget",function(){t=$('<div data-bind="test: {}"></div>').prependTo("body"),$.fn.test=jasmine.createSpy(),e(),ko.applyBindings({},t[0]),expect($.fn.test).toHaveBeenCalled()}),it("should apply the descendant DOM elements' bindings before instantiating the widget",function(){var n;t=$('<div data-bind="test: {}"></div>').prependTo("body"),n=$('<span data-bind="descendantBindingHandler: {}"></span>').prependTo(t),ko.bindingHandlers.descendantBindingHandler=jasmine.createSpyObj("descendantBindingHandler",["init"]),$.fn.test=function(){expect(ko.bindingHandlers.descendantBindingHandler.init).toHaveBeenCalled()},e(),ko.applyBindings({},t[0]),delete ko.bindingHandlers.descendantBindingHandler}),it("should not throw any exception when a foreach binding is applied to the same element",function(){var t=$('<div data-bind="foreach: [], test: {}"></div>').prependTo("body");$.fn.test=function(){},e(),ko.applyBindings({},t[0])}),n=ko.version.match(/^(\d)\.(\d+)/),n&&parseInt(n[1],10)>=3&&it("should instantiate the widget after the standard foreach binding is processed",function(){var t;t=$('<div data-bind="test: {}, foreach: []"></div>').prependTo("body"),spyOn(ko.bindingHandlers.foreach,"init").andCallThrough(),$.fn.test=function(){expect(ko.bindingHandlers.foreach.init).toHaveBeenCalled()},e(),ko.applyBindings({},t[0])}),it("should set the options specified in the binding on the widget",function(){var n;t=$('<div data-bind="test: { foo: fooObservable }"></div>').prependTo("body"),n={fooObservable:ko.observable(1)},$.fn.test=jasmine.createSpy(),e(["foo"]),ko.applyBindings(n,t[0]),expect($.fn.test).toHaveBeenCalledWith({foo:n.fooObservable()})}),it("should bind the event handlers to the viewmodel",function(){var n,r,i;t=$('<div data-bind="test: { bar: barEventHandler }"></div>').prependTo("body"),n={barEventHandler:function(){r=!0,expect(this).toBe(n)}},$.fn.test=function(e){e==="trigger"?i():i=e.bar},e([],["bar"]),ko.applyBindings(n,t[0]),$.fn.test("trigger"),expect(r).toBe(!0)}),it("should support expressions in the options' values",function(){var n;t=$('<div data-bind="test: { foo: fooObservable() + 1 }"></div>').prependTo("body"),n={fooObservable:ko.observable(1)},$.fn.test=jasmine.createSpy(),e(["foo"]),ko.applyBindings(n,t[0]),expect($.fn.test).toHaveBeenCalledWith({foo:2}),n.fooObservable(2),expect($.fn.test).toHaveBeenCalledWith("option","foo",3)}),it("should unwrap the observable options before passing them to the widget",function(){var n;t=$('<div data-bind="test: { foo: fooObservable }"></div>').prependTo("body"),n={fooObservable:ko.observable(1)},$.fn.test=jasmine.createSpy(),e(["foo"]),ko.applyBindings(n,t[0]),expect($.fn.test).toHaveBeenCalledWith({foo:1})}),it("should set the widget's corresponding option when one of the binding's observable option changes",function(){var n;t=$('<div data-bind="test: { foo: fooObservable }"></div>').prependTo("body"),n={fooObservable:ko.observable(1)},$.fn.test=jasmine.createSpy(),e(["foo"]),ko.applyBindings(n,t[0]),expect(t.test).not.toHaveBeenCalledWith("option","foo",2),n.fooObservable(2),expect(t.test).toHaveBeenCalledWith("option","foo",2)}),it("should only set those widget options which has been changed",function(){var n;t=$('<div data-bind="test: { foo: foo, bar: bar }"></div>').prependTo("body"),n={foo:ko.observable(1),bar:ko.observable("one")},$.fn.test=jasmine.createSpy(),e(["foo","bar"]),ko.applyBindings(n,t[0]),$.fn.test.reset(),n.foo(2),expect(t.test).toHaveBeenCalledWith("option","foo",2),expect(t.test).not.toHaveBeenCalledWith("option","bar",jasmine.any(Object))}),it("should refresh the widget when the refreshOn observable changes",function(){var n;t=$('<div data-bind="test: { refreshOn: refreshOnObservable }"></div>').prependTo("body"),n={refreshOnObservable:ko.observable()},$.fn.test=jasmine.createSpy(),e([],[],!0),ko.applyBindings(n,t[0]),n.refreshOnObservable(1),expect(t.test).toHaveBeenCalledWith("refresh")}),it("should not refresh the widget when the hasRefresh option is falsy",function(){var n;t=$('<div data-bind="test: { refreshOn: refreshOnObservable }"></div>').prependTo("body"),n={refreshOnObservable:ko.observable()},$.fn.test=jasmine.createSpy(),e(),ko.applyBindings(n,t[0]),n.refreshOnObservable(1),expect(t.test).not.toHaveBeenCalledWith("refresh")}),it("should set the view model's 'widget' observable option to the widget instance",function(){var n;t=$('<div data-bind="test: { widget: widgetObservable }"></div>').prependTo("body"),n={widgetObservable:ko.observable()},$.widget("ui.test",{}),e(),ko.applyBindings(n,t[0]),expect(n.widgetObservable()).toBeDefined()}),it("should destroy the widget when the DOM node is disposed",function(){t=$('<div data-bind="test: {}"></div>').prependTo("body"),$.fn.test=jasmine.createSpy(),e(["foo"]),ko.applyBindings({},t[0]),expect($.fn.test).not.toHaveBeenCalledWith("destroy"),ko.removeNode(t[0]),expect($.fn.test).toHaveBeenCalledWith("destroy")})})})()}.call(e),t})})(this);