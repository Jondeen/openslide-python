(function(e){var t;define(["jquery"],function(n){return function(){(function(){"use strict";describe("The dialog binding",function(){it("should handle each option of the widget",function(){var e={autoOpen:[!0,!1],buttons:[{},{Ok:function(){}}],closeOnEscape:[!0,!1],closeText:["Close","foo"],dialogClass:["","bar"],draggable:[!0,!1],height:["auto",100],maxHeight:[!1,100],maxWidth:[!1,100],minHeight:[150,100],minWidth:[150,100],modal:[!1,!0],resizable:[!0,!1],show:[null,"slow"],title:["one","two"],width:[300,175]};switch(getMajorMinorVersion($.ui.version)){case"1.8":$.extend(e,{disabled:[!0,!1],stack:[!0,!1],zIndex:[1e3,100]});break;case"1.9":$.extend(e,{hide:[null,3],stack:[!0,!1],zIndex:[1e3,100]});break;default:$.extend(e,{hide:[null,3]})}testWidgetOptions("dialog",e)}),it("should handle the position option",function(){var e,t,n;e=$('<div data-bind="dialog: { position: position }"></div>').prependTo("body"),t={position:ko.observable({my:"center",at:"center",of:window})},ko.applyBindings(t,e[0]),n=e.dialog("option","position"),expect(n.my).toEqual("center"),expect(n.at).toEqual("center"),expect(n.of).toEqual(window),t.position({my:"left top",at:"left bottom",of:window}),n=e.dialog("option","position"),expect(n.my).toEqual("left top"),expect(n.at).toEqual("left bottom"),expect(n.of).toEqual(window),ko.removeNode(e[0])}),it("should handle each event of the widget",function(){var e,t;e=$('<div data-bind="dialog: { create: createEventHandler }"></div>').prependTo("body"),t={createEventHandler:jasmine.createSpy()},ko.applyBindings(t,e[0]),expect(t.createEventHandler).toHaveBeenCalled(),ko.removeNode(e[0])}),it("should write the widget's state back to the viewmodel when opened/closed.",function(){var e,t;e=$('<div data-bind="dialog: { isOpen: isOpen }"></div>').prependTo("body"),t={isOpen:ko.observable(!1)},ko.applyBindings(t,e[0]),expect(t.isOpen.peek()).toEqual(!1),e.dialog("open"),expect(t.isOpen.peek()).toEqual(!0),ko.removeNode(e[0])}),it("should write the element to the widget observable",function(){var e,t,n;e=$('<div data-bind="dialog: { widget: widget, autoOpen: false }"></div>').prependTo("body"),t={widget:ko.observable()},ko.applyBindings(t,e[0]),expect(t.widget()).toBeDefined(),n=t.widget().dialog("option","autoOpen"),expect(n).toBe(!1),ko.removeNode(e[0])}),it("should update the dialog's width and height observables when the widget is resized.",function(){var e,t,n;e=$('<div data-bind="dialog: { width: width, height: height }"></div>').prependTo("body"),t={width:ko.observable(150),height:ko.observable(150)},ko.applyBindings(t,e[0]),n=e.parent().find(".ui-resizable-handle.ui-resizable-se"),n.simulate("mouseover"),n.simulate("drag",{dx:10,dy:20}),expect(Math.abs(t.width.peek()-160)).toBeLessThan(2),expect(t.height.peek()).toEqual(e.dialog("option","height")),ko.removeNode(e[0])})})})()}.call(e),t})})(this);