(function(root){var amdExports;define([],function(){return function(){describe("Binding preprocessing",function(){it('Should allow binding to modify value through "preprocess" method',function(){delete ko.bindingHandlers.a,ko.bindingHandlers.b={preprocess:function(e){return e||"false"}};var rewritten=ko.expressionRewriting.preProcessBindings("a: 1, b"),parsedRewritten=eval("({"+rewritten+"})");expect(parsedRewritten.a).toEqual(1),expect(parsedRewritten.b).toEqual(!1)}),it('Should allow binding to add/replace bindings through "preprocess" method\'s "addBinding" callback',function(){ko.bindingHandlers.a={preprocess:function(e,t,n){return n(t+"2",e),e}},ko.bindingHandlers.b={preprocess:function(e,t,n){n(t+"2",e)}};var rewritten=ko.expressionRewriting.preProcessBindings("a: 1, b: 2"),parsedRewritten=eval("({"+rewritten+"})");expect(parsedRewritten.a).toEqual(1),expect(parsedRewritten.a2).toEqual(1),expect(parsedRewritten.b).toBeUndefined(),expect(parsedRewritten.b2).toEqual(2)}),it('Should be able to chain "preprocess" calls when one adds a binding for another',function(){ko.bindingHandlers.a={preprocess:function(e,t,n){n("b",e)}},ko.bindingHandlers.b={preprocess:function(e,t,n){return""+(+e+1)}};var rewritten=ko.expressionRewriting.preProcessBindings("a: 2"),parsedRewritten=eval("({"+rewritten+"})");expect(parsedRewritten.a).toBeUndefined(),expect(parsedRewritten.b).toEqual(3)}),it("Should be able to get a dynamically created binding handler during preprocessing",function(){this.restoreAfter(ko,"getBindingHandler"),ko.getBindingHandler=function(e){return{preprocess:function(e){return e+"2"}}};var rewritten=ko.expressionRewriting.preProcessBindings("a: 1"),parsedRewritten=eval("({"+rewritten+"})");expect(parsedRewritten.a).toEqual(12)})})}.call(root),amdExports})})(this);