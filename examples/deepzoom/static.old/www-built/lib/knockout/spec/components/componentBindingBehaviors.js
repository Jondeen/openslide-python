(function(e){var t;define([],function(){return function(){describe("Components: Component binding",function(){var e="test-component",t,n,r;beforeEach(function(){jasmine.Clock.useMock(),jasmine.prepareTestNode(),n={},t={name:e,params:n},r={testComponentBindingValue:t,isOuterViewModel:!0},testNode.innerHTML='<div data-bind="component: testComponentBindingValue"></div>'}),afterEach(function(){jasmine.Clock.reset(),ko.components.unregister(e)}),it("Controls descendant bindings",function(){testNode.innerHTML="<div data-bind=\"if: true, component: 'dummy'\"></div>",expect(function(){ko.applyBindings(null,testNode)}).toThrowContaining("Multiple bindings (if and component) are trying to control descendant bindings of the same element.")}),it("Throws if no name is specified (name provided directly)",function(){testNode.innerHTML="<div data-bind=\"component: ''\"></div>",expect(function(){ko.applyBindings(null,testNode)}).toThrowContaining("No component name specified")}),it("Throws if no name is specified (using options object)",function(){delete t.name,expect(function(){ko.applyBindings(r,testNode)}).toThrowContaining("No component name specified")}),it("Throws if the component name is unknown",function(){expect(function(){ko.applyBindings(r,testNode),jasmine.Clock.tick(1)}).toThrow("Unknown component 'test-component'")}),it("Throws if the component definition has no template",function(){ko.components.register(e,{}),expect(function(){ko.applyBindings(r,testNode),jasmine.Clock.tick(1)}).toThrow("Component 'test-component' has no template")}),it("Replaces the element's contents with a clone of the template",function(){var t=document.createDocumentFragment();t.appendChild(document.createElement("div")),t.appendChild(document.createTextNode(" ")),t.appendChild(document.createElement("span")),t.childNodes[0].innerHTML="hello",t.childNodes[2].innerHTML="world",ko.components.register(e,{template:t}),ko.applyBindings({testComponentBindingValue:e},testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0]).toContainHtml("<div>hello</div> <span>world</span>"),expect(testNode.childNodes[0].childNodes[0]).not.toBe(t[0])}),it("Passes params and componentInfo (with prepopulated element and templateNodes) to the component's viewmodel factory",function(){var t={template:'<div data-bind="text: 123">I have been prepopulated and not bound yet</div>',viewModel:{createViewModel:function(e,r){return expect(r.element).toContainText("I have been prepopulated and not bound yet"),expect(e).toBe(n),expect(r.templateNodes.length).toEqual(3),expect(r.templateNodes[0]).toContainText("Here are some "),expect(r.templateNodes[1]).toContainText("template"),expect(r.templateNodes[2]).toContainText(" nodes"),expect(r.templateNodes[1].tagName.toLowerCase()).toEqual("em"),expect(this.createViewModel).toBe(t.viewModel.createViewModel),expect(this.template).toBeDefined(),r.element.childNodes[0].setAttribute("data-bind","text: someValue"),{someValue:"From the viewmodel"}}}};testNode.innerHTML='<div data-bind="component: testComponentBindingValue">Here are some <em>template</em> nodes</div>',ko.components.register(e,t),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode).toContainText("From the viewmodel")}),it("Handles absence of viewmodel by using the params",function(){ko.components.register(e,{template:'<div data-bind="text: myvalue"></div>'}),n.myvalue="some parameter value",ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0]).toContainHtml('<div data-bind="text: myvalue">some parameter value</div>')}),it("Injects and binds the component synchronously if it is flagged as synchronous and loads synchronously",function(){ko.components.register(e,{synchronous:!0,template:'<div data-bind="text: myvalue"></div>',viewModel:function(){this.myvalue=123}}),ko.applyBindings(r,testNode),expect(testNode.childNodes[0]).toContainHtml('<div data-bind="text: myvalue">123</div>')}),it("Injects and binds the component synchronously if it is flagged as synchronous and already cached, even if it previously loaded asynchronously",function(){this.restoreAfter(window,"require");var t={};window.require=function(e,t){expect(e[0]).toBe("testViewModelModule"),setTimeout(function(){var e=function(e){this.viewModelProperty=e};t(e)},0)},ko.components.register(e,{synchronous:!0,template:'<div data-bind="text: viewModelProperty"></div>',viewModel:{require:"testViewModelModule"}});var n=ko.observableArray(["first"]);testNode.innerHTML='<div data-bind="foreach: testList"><div data-bind="component: { name: \'test-component\', params: $data }"></div></div>',ko.applyBindings({testList:n},testNode),expect(testNode.childNodes[0]).toContainText(""),jasmine.Clock.tick(0),expect(testNode.childNodes[0]).toContainText("first"),n.push("second"),expect(testNode.childNodes[0]).toContainText("firstsecond",!0)}),it("Creates a binding context with the correct parent",function(){ko.components.register(e,{template:'Parent is outer view model: <span data-bind="text: $parent.isOuterViewModel"></span>'}),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0]).toContainText("Parent is outer view model: true")}),it("Creates a binding context with $componentTemplateNodes giving the original child nodes",function(){ko.components.register(e,{template:'Start<span data-bind="template: { nodes: $componentTemplateNodes }"></span>End'}),testNode.innerHTML='<div data-bind="component: testComponentBindingValue"><em>original</em> child nodes</div>',ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0]).toContainHtml('start<span data-bind="template: { nodes: $componenttemplatenodes }"><em>original</em> child nodes</span>end')}),it("Creates a binding context with $component to reference the closest component viewmodel",function(){this.after(function(){ko.components.unregister("sub-component")}),ko.components.register(e,{template:'<span data-bind="with: { childContext: 123 }">In child context <!-- ko text: childContext --><!-- /ko -->, inside component with property <!-- ko text: $component.componentProp --><!-- /ko -->. <div data-bind="component: \'sub-component\'"></div></span>',viewModel:function(){return{componentProp:456}}}),ko.components.register("sub-component",{template:"Now in sub-component with property <!-- ko text: $component.componentProp --><!-- /ko -->.",viewModel:function(){return{componentProp:789}}}),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0]).toContainText("In child context 123, inside component with property 456. Now in sub-component with property 789.",!0)}),it("Passes nonobservable params to the component",function(){var t=[];ko.components.register(e,{viewModel:function(e){t.push(e)},template:"Ignored"}),n.someValue=123,ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(t).toEqual([n]),expect(n.someValue).toBe(123)}),it("Passes through observable params without unwrapping them (so a given component instance can observe them changing)",function(){var t=[];ko.components.register(e,{viewModel:function(e){t.push(e),this.someValue=e.someValue},template:'The value is <span data-bind="text: someValue"></span>.'}),n.someValue=ko.observable(123),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(t).toEqual([n]),expect(testNode).toContainText("The value is 123."),n.someValue(456),expect(t.length).toBe(1),expect(testNode).toContainText("The value is 456.")}),it("Supports observable component names, rebuilding the component if the name changes, disposing the old viewmodel and nodes",function(){function e(e){this.alphaValue=e.suppliedValue}function i(e){this.betaValue=e.suppliedValue}this.after(function(){ko.components.unregister("component-alpha"),ko.components.unregister("component-beta")}),e.prototype.dispose=function(){expect(arguments.length).toBe(0),this.alphaWasDisposed=!0,expect(testNode).toContainText("Alpha value is 234.")},ko.components.register("component-alpha",{viewModel:e,template:'<div class="alpha">Alpha value is <span data-bind="text: alphaValue"></span>.</div>'}),ko.components.register("component-beta",{viewModel:i,template:'<div class="beta">Beta value is <span data-bind="text: betaValue"></span>.</div>'}),t.name=ko.observable("component-alpha"),n.suppliedValue=ko.observable(123),ko.applyBindings(r,testNode),jasmine.Clock.tick(1);var s=testNode.firstChild.firstChild,o=ko.dataFor(s);expect(s.className).toBe("alpha"),expect(testNode).toContainText("Alpha value is 123."),expect(t.name.getSubscriptionsCount()).toBe(1),expect(n.suppliedValue.getSubscriptionsCount()).toBe(1),expect(o.alphaWasDisposed).not.toBe(!0),ko.utils.domData.set(s,"TestValue","Hello"),n.suppliedValue(234),expect(testNode).toContainText("Alpha value is 234."),expect(t.name.getSubscriptionsCount()).toBe(1),expect(n.suppliedValue.getSubscriptionsCount()).toBe(1),expect(testNode.firstChild.firstChild).toBe(s),expect(ko.utils.domData.get(s,"TestValue")).toBe("Hello"),expect(o.alphaWasDisposed).not.toBe(!0),t.name("component-beta"),expect(testNode).toContainText("Alpha value is 234."),jasmine.Clock.tick(1),expect(testNode).toContainText("Beta value is 234."),expect(t.name.getSubscriptionsCount()).toBe(1),expect(n.suppliedValue.getSubscriptionsCount()).toBe(1),expect(ko.utils.domData.get(s,"TestValue")).toBe(undefined),expect(o.alphaWasDisposed).toBe(!0)}),it("Supports binding to an observable that contains name/params, rebuilding the component if that observable changes, disposing the old viewmodel and nodes",function(){function e(e){this.alphaValue=e.suppliedValue}function t(e){this.betaValue=e.suppliedValue}this.after(function(){ko.components.unregister("component-alpha"),ko.components.unregister("component-beta")}),e.prototype.dispose=function(){expect(arguments.length).toBe(0),this.alphaWasDisposed=!0,expect(testNode).toContainText("Alpha value is 123.")},ko.components.register("component-alpha",{viewModel:e,template:'<div class="alpha">Alpha value is <span data-bind="text: alphaValue"></span>.</div>'}),ko.components.register("component-beta",{viewModel:t,template:'<div class="beta">Beta value is <span data-bind="text: betaValue"></span>.</div>'}),r.testComponentBindingValue=ko.observable({name:"component-alpha",params:{suppliedValue:123}}),ko.applyBindings(r,testNode),jasmine.Clock.tick(1);var n=testNode.firstChild.firstChild,i=ko.dataFor(n);expect(n.className).toBe("alpha"),expect(testNode).toContainText("Alpha value is 123."),expect(r.testComponentBindingValue.getSubscriptionsCount()).toBe(1),expect(i.alphaWasDisposed).not.toBe(!0),ko.utils.domData.set(n,"TestValue","Hello"),r.testComponentBindingValue({name:"component-beta",params:{suppliedValue:456}}),expect(testNode).toContainText("Alpha value is 123."),jasmine.Clock.tick(1),expect(testNode).toContainText("Beta value is 456."),expect(r.testComponentBindingValue.getSubscriptionsCount()).toBe(1),expect(ko.utils.domData.get(n,"TestValue")).toBe(undefined),expect(i.alphaWasDisposed).toBe(!0)}),it("Rebuilds the component if params change in a way that is forced to unwrap inside the binding, disposing the old viewmodel and nodes",function(){function t(e){this.myData=e.someData}t.prototype.dispose=function(){this.wasDisposed=!0},ko.components.register(e,{viewModel:t,template:'<div>Value is <span data-bind="text: myData"></span>.</div>'});var n=ko.observable("First");testNode.innerHTML="<div data-bind=\"component: { name: '"+e+"', params: { someData: someObservable() } }\"></div>",ko.applyBindings({someObservable:n},testNode),jasmine.Clock.tick(1);var r=testNode.firstChild.firstChild,i=ko.dataFor(r);expect(i instanceof t).toBe(!0),expect(testNode).toContainText("Value is First."),expect(i.wasDisposed).not.toBe(!0),ko.utils.domData.set(r,"TestValue","Hello"),n("Second"),expect(testNode).toContainText("Value is First."),expect(i.wasDisposed).not.toBe(!0),expect(ko.utils.domData.get(r,"TestValue")).toBe("Hello"),jasmine.Clock.tick(1),expect(testNode).toContainText("Value is Second."),expect(i.wasDisposed).toBe(!0),expect(ko.utils.domData.get(r,"TestValue")).toBe(undefined);var s=ko.dataFor(testNode.firstChild.firstChild);expect(s instanceof t).toBe(!0),expect(s).not.toBe(i)}),it("Is possible to pass expressions that can vary observably and evaluate as writable observable instances",function(){var t=0;ko.components.register("test-component",{template:'<input data-bind="value: myval"/>',viewModel:function(e){t++,this.myval=e.somevalue,expect(ko.isWritableObservable(this.myval)).toBe(!0)}});var n=ko.observable("inner1"),r=ko.observable({inner:n});testNode.innerHTML="<div data-bind=\"component: { name: '"+e+"', params: { somevalue: outer().inner } }\"></div>",ko.applyBindings({outer:r},testNode),jasmine.Clock.tick(1),expect(testNode.childNodes[0].childNodes[0].value).toEqual("inner1"),expect(r.getSubscriptionsCount()).toBe(1),expect(n.getSubscriptionsCount()).toBe(1),expect(t).toBe(1),n("inner2"),expect(testNode.childNodes[0].childNodes[0].value).toEqual("inner2"),expect(r.getSubscriptionsCount()).toBe(1),expect(n.getSubscriptionsCount()).toBe(1),expect(t).toBe(1),testNode.childNodes[0].childNodes[0].value="inner3",ko.utils.triggerEvent(testNode.childNodes[0].childNodes[0],"change"),expect(n()).toEqual("inner3");var i=ko.observable("newinner");r({inner:i}),jasmine.Clock.tick(1),expect(testNode.childNodes[0].childNodes[0].value).toEqual("newinner"),expect(r.getSubscriptionsCount()).toBe(1),expect(n.getSubscriptionsCount()).toBe(0),expect(i.getSubscriptionsCount()).toBe(1),expect(t).toBe(2),testNode.childNodes[0].childNodes[0].value="newinner2",ko.utils.triggerEvent(testNode.childNodes[0].childNodes[0],"change"),expect(i()).toEqual("newinner2"),expect(n()).toEqual("inner3"),ko.cleanNode(testNode),expect(r.getSubscriptionsCount()).toBe(0),expect(n.getSubscriptionsCount()).toBe(0),expect(i.getSubscriptionsCount()).toBe(0)}),it("Disposes the viewmodel if the element is cleaned",function(){function t(){}t.prototype.dispose=function(){this.wasDisposed=!0},ko.components.register(e,{viewModel:t,template:"<div>Ignored</div>"}),ko.applyBindings(r,testNode),jasmine.Clock.tick(1);var n=testNode.firstChild.firstChild,i=ko.dataFor(n);expect(i instanceof t).toBe(!0),expect(i.wasDisposed).not.toBe(!0),ko.cleanNode(testNode.firstChild),expect(i.wasDisposed).toBe(!0)}),it("Does not inject the template or instantiate the viewmodel if the element was cleaned before component loading completed",function(){var t=0;ko.components.register(e,{viewModel:function(){t++},template:"<div>Should not be used</div>"}),ko.applyBindings(r,testNode),ko.cleanNode(testNode.firstChild),jasmine.Clock.tick(1),expect(t).toBe(0),expect(testNode.firstChild).toContainHtml("")}),it("Disregards component load completions that are no longer relevant",function(){function s(e){i.push([1,e])}function o(e){i.push([2,e])}function u(e){i.push([3,e])}function a(e){i.push([4,e])}this.restoreAfter(window,"require");var e={};window.require=function(t,n){expect(t.length).toBe(1),expect(t[0]in e).toBe(!1),e[t[0]]=n};var i=[];u.prototype.dispose=function(){this.wasDisposed=!0},ko.components.register("component-1",{viewModel:{require:"module-1"},template:"<div>Component 1 template</div>"}),ko.components.register("component-2",{viewModel:{require:"module-2"},template:"<div>Component 2 template</div>"}),ko.components.register("component-3",{viewModel:{require:"module-3"},template:"<div>Component 3 template</div>"}),ko.components.register("component-4",{viewModel:{require:"module-4"},template:"<div>Component 4 template</div>"}),this.after(function(){for(var e=0;e<4;e++)ko.components.unregister("component-"+e)}),t.name=ko.observable("component-1"),ko.applyBindings(r,testNode),jasmine.Clock.tick(10),expect(i.length).toBe(0),expect(testNode.firstChild.childNodes.length).toBe(0),t.name("component-2"),jasmine.Clock.tick(1),t.name("component-3"),expect(i.length).toBe(0),e["module-1"](s),jasmine.Clock.tick(1),expect(i.length).toBe(0),expect(testNode.firstChild.childNodes.length).toBe(0),e["module-3"](u),expect(i).toEqual([[3,n]]),expect(testNode).toContainText("Component 3 template");var f=ko.dataFor(testNode.firstChild.firstChild);expect(f instanceof u).toBe(!0),expect(f.wasDisposed).not.toBe(!0),e["module-2"](o),jasmine.Clock.tick(1),expect(i.length).toBe(1),expect(testNode).toContainText("Component 3 template"),expect(f.wasDisposed).not.toBe(!0),t.name("component-2"),jasmine.Clock.tick(1),expect(i.length).toBe(2),expect(testNode).toContainText("Component 2 template"),expect(f.wasDisposed).toBe(!0),t.name("component-4"),jasmine.Clock.tick(1),ko.cleanNode(testNode.firstChild),e["module-4"](a),expect(i.length).toBe(2),expect(testNode).toContainText("Component 2 template")}),it("Supports virtual elements",function(){testNode.innerHTML="Hello! <!-- ko component: testComponentBindingValue -->&nbsp;<!-- /ko --> Goodbye.",ko.components.register(e,{template:'Your param is <span data-bind="text: someData">&nbsp;</span>'}),n.someData=ko.observable(123),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode).toContainText("Hello! Your param is 123 Goodbye."),n.someData(456),expect(testNode).toContainText("Hello! Your param is 456 Goodbye.")}),describe("Does not automatically subscribe to any observables you evaluate during createViewModel or a viewmodel constructor",function(){it("when loaded asynchronously",function(){ko.components.register(e,{viewModel:{createViewModel:function(e,t){return{someData:e.someData()}}},template:'<div data-bind="text: someData"></div>'}),n.someData=ko.observable("First"),ko.applyBindings(r,testNode),jasmine.Clock.tick(1),expect(testNode).toContainText("First"),expect(n.someData.getSubscriptionsCount()).toBe(0),n.someData("Second"),jasmine.Clock.tick(1),expect(testNode).toContainText("First")}),it("when loaded synchronously",function(){ko.components.register(e,{synchronous:!0,viewModel:{createViewModel:function(e,t){return{someData:e.someData()}}},template:'<div data-bind="text: someData"></div>'}),n.someData=ko.observable("First"),ko.applyBindings(r,testNode),expect(testNode).toContainText("First"),expect(n.someData.getSubscriptionsCount()).toBe(0),n.someData("Second"),expect(testNode).toContainText("First")}),it("when cached component is loaded synchronously",function(){ko.components.register(e,{synchronous:!0,viewModel:{createViewModel:function(e,t){return{someData:e.someData()}}},template:'<div data-bind="text: someData"></div>'}),ko.components.get(e,function(){}),n.someData=ko.observable("First"),ko.applyBindings(r,testNode),expect(testNode).toContainText("First"),expect(n.someData.getSubscriptionsCount()).toBe(0),n.someData("Second"),expect(testNode).toContainText("First")})})})}.call(e),t})})(this);