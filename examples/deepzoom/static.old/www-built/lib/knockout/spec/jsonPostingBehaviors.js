(function(e){var t;define([],function(){return function(){describe("JSON posting",function(){it("Should stringify and post the supplied data to a supplied URL",function(){var e;ko.utils.postJson("http://example.com/some/url",{myModel:{a:1}},{submitter:function(t){e=t}}),expect(e.action).toEqual("http://example.com/some/url");var t=e.childNodes[0];expect(t.tagName).toEqual("INPUT"),expect(t.name).toEqual("myModel"),expect(t.value).toEqual('{"a":1}')}),it("Given an existing form, should take the URL from the form's 'action' attribute",function(){var e=document.createElement("FORM");e.action="http://example.com/blah";var t;ko.utils.postJson(e,{myModel:{a:1}},{submitter:function(e){t=e}}),expect(t.action).toEqual("http://example.com/blah")}),it("Given an existing form, should include any requested field values from that form",function(){var e=document.createElement("FORM");e.innerHTML='<input name="someField" value="myValue"/><input name="anotherField" value="unwantedValue"/>';var t;ko.utils.postJson(e,{myModel:{a:1}},{includeFields:["someField"],submitter:function(e){t=e}}),expect(ko.utils.getFormFields(t,"someField")[0].value).toEqual("myValue"),expect(ko.utils.getFormFields(t,"anotherField").length).toEqual(0)}),it("Given an existing form, should include Rails and ASP.NET MVC auth tokens by default",function(){var e=document.createElement("FORM");e.innerHTML='<input name="__RequestVerificationToken_Lr4e" value="wantedval1"/><input name="__RequestVe" value="unwantedval"/><input name="authenticity_token" value="wantedval2"/>';var t;ko.utils.postJson(e,{myModel:{a:1}},{submitter:function(e){t=e}}),expect(ko.utils.getFormFields(t,"__RequestVerificationToken_Lr4e")[0].value).toEqual("wantedval1"),expect(ko.utils.getFormFields(t,"__RequestVe").length).toEqual(0),expect(ko.utils.getFormFields(t,"authenticity_token")[0].value).toEqual("wantedval2")}),it("Should not truncate large values",function(){var e=(new Array(1e6)).join("a"),t=JSON.stringify(e),n;ko.utils.postJson("http://example.com",{longString:e},{submitter:function(e){n=e}});var r=ko.utils.getFormFields(n,"longString")[0].value;expect(r.length).toEqual(t.length),expect(r).toEqual(t)})})}.call(e),t})})(this);