(function(e){var t;define([],function(){return function(){describe("Binding: Hasfocus",function(){beforeEach(jasmine.prepareTestNode),beforeEach(function(){waits(1)}),it("Should respond to changes on an observable value by blurring or focusing the element",function(){var e,t={myVal:ko.observable()};testNode.innerHTML="<input data-bind='hasfocus: myVal' /><input />",ko.applyBindings(t,testNode),ko.utils.registerEventHandler(testNode.childNodes[0],"focusin",function(){e=!0}),ko.utils.registerEventHandler(testNode.childNodes[0],"focusout",function(){e=!1}),t.myVal(!0),expect(e).toEqual(!0),t.myVal(!1),expect(e).toEqual(!1)}),it("Should set an observable value to be true on focus and false on blur",function(){var e={myVal:ko.observable()};testNode.innerHTML="<input data-bind='hasfocus: myVal' /><input />",ko.applyBindings(e,testNode),testNode.childNodes[0].focus(),ko.utils.triggerEvent(testNode.childNodes[0],"focusin"),expect(e.myVal()).toEqual(!0),testNode.childNodes[1].focus(),ko.utils.triggerEvent(testNode.childNodes[0],"focusout"),expect(e.myVal()).toEqual(!1);var t=!1;ko.utils.registerEventHandler(testNode.childNodes[0],"focusin",function(){t=!0}),e.myVal(!0),expect(t).toEqual(!0)}),it("Should set a non-observable value to be true on focus and false on blur",function(){var e={myVal:null};testNode.innerHTML="<input data-bind='hasfocus: myVal' /><input />",ko.applyBindings(e,testNode),testNode.childNodes[0].focus(),ko.utils.triggerEvent(testNode.childNodes[0],"focusin"),expect(e.myVal).toEqual(!0),testNode.childNodes[1].focus(),ko.utils.triggerEvent(testNode.childNodes[0],"focusout"),expect(e.myVal).toEqual(!1)}),it("Should be aliased as hasFocus as well as hasfocus",function(){expect(ko.bindingHandlers.hasFocus).toEqual(ko.bindingHandlers.hasfocus)}),it("Should not unnecessarily focus or blur an element that is already focused/blurred",function(){var e={isFocused:ko.observable({})};testNode.innerHTML="<input data-bind='hasfocus: isFocused' />",ko.applyBindings(e,testNode);var t=!1;ko.utils.registerEventHandler(testNode.childNodes[0],"focusin",function(){t=!0}),e.isFocused.valueHasMutated(),expect(t).toEqual(!1),e.isFocused(!1);var n=!1;ko.utils.registerEventHandler(testNode.childNodes[0],"focusout",function(){n=!0}),e.isFocused(null),expect(n).toEqual(!1)})})}.call(e),t})})(this);