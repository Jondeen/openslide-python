(function(e){var t;define([],function(){return function(){describe("Binding: Checked",function(){beforeEach(jasmine.prepareTestNode),it("Triggering a click should toggle a checkbox's checked state before the event handler fires",function(){testNode.innerHTML="<input type='checkbox' />";var e=0,t;ko.utils.registerEventHandler(testNode.childNodes[0],"click",function(){e++,expect(testNode.childNodes[0].checked).toEqual(t)}),expect(testNode.childNodes[0].checked).toEqual(!1),t=!0,ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(testNode.childNodes[0].checked).toEqual(!0),expect(e).toEqual(1),t=!1,ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(testNode.childNodes[0].checked).toEqual(!1),expect(e).toEqual(2)}),it("Should be able to control a checkbox's checked state",function(){var e=new ko.observable(!0);testNode.innerHTML="<input type='checkbox' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),expect(testNode.childNodes[0].checked).toEqual(!0),e(!1),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("Should update observable properties on the underlying model when the checkbox click event fires",function(){var e=new ko.observable(!1);testNode.innerHTML="<input type='checkbox' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(e()).toEqual(!0)}),it("Should only notify observable properties on the underlying model *once* even if the checkbox change events fire multiple times",function(){var e=new ko.observable,t=0;e.subscribe(function(){t++}),testNode.innerHTML="<input type='checkbox' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),ko.utils.triggerEvent(testNode.childNodes[0],"change"),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(t).toEqual(1),ko.utils.triggerEvent(testNode.childNodes[0],"click"),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(t).toEqual(2)}),it("Should update non-observable properties on the underlying model when the checkbox click event fires",function(){var e={someProp:!1};testNode.innerHTML="<input type='checkbox' data-bind='checked:someProp' />",ko.applyBindings(e,testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(e.someProp).toEqual(!0)}),it("Should make a radio button checked if and only if its value matches the bound model property",function(){var e=new ko.observable("another value");testNode.innerHTML="<input type='radio' value='This Radio Button Value' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),expect(testNode.childNodes[0].checked).toEqual(!1),e("This Radio Button Value"),expect(testNode.childNodes[0].checked).toEqual(!0)}),it("Should set an observable model property to this radio button's value when checked",function(){var e=new ko.observable("another value");testNode.innerHTML="<input type='radio' value='this radio button value' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),expect(e()).toEqual("another value"),testNode.childNodes[0].click(),expect(e()).toEqual("this radio button value")}),it("Should only notify observable properties on the underlying model *once* even if the radio button change/click events fire multiple times",function(){var e=new ko.observable("original value"),t=0;e.subscribe(function(){t++}),testNode.innerHTML="<input type='radio' value='this radio button value' data-bind='checked:someProp' /><input type='radio' value='different value' data-bind='checked:someProp' />",ko.applyBindings({someProp:e},testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),ko.utils.triggerEvent(testNode.childNodes[0],"change"),ko.utils.triggerEvent(testNode.childNodes[0],"click"),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(t).toEqual(1),ko.utils.triggerEvent(testNode.childNodes[1],"click"),ko.utils.triggerEvent(testNode.childNodes[1],"change"),expect(t).toEqual(2)}),it("Should set a non-observable model property to this radio button's value when checked",function(){var e={someProp:"another value"};testNode.innerHTML="<input type='radio' value='this radio button value' data-bind='checked:someProp' />",ko.applyBindings(e,testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(e.someProp).toEqual("this radio button value")}),it("When a checkbox is bound to an array, the checkbox should control whether its value is in that array",function(){var e={myArray:["Existing value","Unrelated value"]};testNode.innerHTML="<input type='checkbox' value='Existing value' data-bind='checked:myArray' /><input type='checkbox' value='New value'      data-bind='checked:myArray' />",ko.applyBindings(e,testNode),expect(e.myArray).toEqual(["Existing value","Unrelated value"]),expect(testNode.childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[1].checked).toEqual(!1),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!0),expect(e.myArray).toEqual(["Existing value","Unrelated value","New value"]),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!1),expect(e.myArray).toEqual(["Existing value","Unrelated value"])}),it("When a checkbox is bound to an observable array, the checkbox checked state responds to changes in the array",function(){var e={myObservableArray:ko.observableArray(["Unrelated value"])};testNode.innerHTML="<input type='checkbox' value='My value' data-bind='checked:myObservableArray' />",ko.applyBindings(e,testNode),expect(testNode.childNodes[0].checked).toEqual(!1),e.myObservableArray.push("My value"),expect(testNode.childNodes[0].checked).toEqual(!0),e.myObservableArray.remove("My value"),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("When the radio button 'value' attribute is set via attr binding, should set initial checked state correctly (attr before checked)",function(){var e=new ko.observable("this radio button value");testNode.innerHTML="<input type='radio' data-bind='attr:{value:\"this radio button value\"}, checked:someProp' />",ko.applyBindings({someProp:e},testNode),expect(testNode.childNodes[0].checked).toEqual(!0),e("another value"),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("When the radio button 'value' attribute is set via attr binding, should set initial checked state correctly (checked before attr)",function(){var e=new ko.observable("this radio button value");testNode.innerHTML="<input type='radio' data-bind='checked:someProp, attr:{value:\"this radio button value\"}' />",ko.applyBindings({someProp:e},testNode),expect(testNode.childNodes[0].checked).toEqual(!0),e("another value"),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("When the bound observable is updated in a subscription in response to a radio click, view and model should stay in sync",function(){testNode.innerHTML='<input type="radio" value="1" name="x" data-bind="checked: choice" /><input type="radio" value="2" name="x" data-bind="checked: choice" /><input type="radio" value="3" name="x" data-bind="checked: choice" />';var e=ko.observable("1");e.subscribe(function(t){t=="3"&&e("1")}),ko.applyBindings({choice:e},testNode),expect(testNode.childNodes[0].checked).toEqual(!0),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!0),ko.utils.triggerEvent(testNode.childNodes[2],"click"),expect(testNode.childNodes[0].checked).toEqual(!0)}),describe("With 'checkedValue'",function(){it("When a 'checkedValue' is specified, should use that as the checkbox value in the array",function(){var e={myArray:ko.observableArray([1,3])};testNode.innerHTML="<input type='checkbox' data-bind='checked:myArray, checkedValue:1' /><input value='off' type='checkbox' data-bind='checked:myArray, checkedValue:2' />",ko.applyBindings(e,testNode),expect(e.myArray()).toEqual([1,3]),expect(testNode.childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[1].checked).toEqual(!1),expect(testNode.childNodes[0].value).toEqual("1"),expect(testNode.childNodes[1].value).toEqual("2"),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!0),expect(e.myArray()).toEqual([1,3,2]),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!1),expect(e.myArray()).toEqual([1,3]),e.myArray.push(2),expect(testNode.childNodes[1].checked).toEqual(!0),e.myArray.remove(1),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("Should be able to use objects as value of checkboxes using 'checkedValue'",function(){var e={x:1},t={y:1},n={values:[e],choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='checkbox' data-bind='checked:$parent.values, checkedValue:$data' /></div>",ko.applyBindings(n,testNode),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[1],"click"),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0),expect(n.values).toEqual([e,t]),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[1],"click"),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),expect(n.values).toEqual([e])}),it("Should be able to use observables as value of checkboxes using 'checkedValue'",function(){var e={id:ko.observable(1)},t={id:ko.observable(2)},n={values:[1],choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='checkbox' data-bind='checkedValue:id, checked:$parent.values' /></div>",ko.applyBindings(n,testNode),expect(n.values).toEqual([1]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),e.id(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),expect(n.values).toEqual([3]),t.id(4),expect(n.values).toEqual([3]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(3),expect(n.values).toEqual([3]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0)}),it("When a 'checkedValue' is specified, should use that as the radio button's value",function(){var e=ko.observable(!1);testNode.innerHTML="<input type='radio' data-bind='checked:someProp, checkedValue:true' /><input type='radio' data-bind='checked:someProp, checkedValue:false' />",ko.applyBindings({someProp:e},testNode),expect(e()).toEqual(!1),expect(testNode.childNodes[0].checked).toEqual(!1),expect(testNode.childNodes[1].checked).toEqual(!0),e(!0),expect(testNode.childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[1].checked).toEqual(!1),testNode.childNodes[1].click(),expect(e()).toEqual(!1),expect(testNode.childNodes[0].checked).toEqual(!1),expect(testNode.childNodes[1].checked).toEqual(!0)}),it("When node is removed, subscription to observable bound to 'checkedValue' is disposed",function(){var e={values:[1],checkedValue:ko.observable(1)};testNode.innerHTML="<input type='checkbox' data-bind='checkedValue:checkedValue, checked:values' />",ko.applyBindings(e,testNode),expect(e.values).toEqual([1]),expect(testNode.childNodes[0].checked).toEqual(!0),expect(e.checkedValue.getSubscriptionsCount()).toBeGreaterThan(0),ko.removeNode(testNode.childNodes[0]),expect(e.checkedValue.getSubscriptionsCount()).toEqual(0)}),it("Should be able to use observables as value of radio buttons using 'checkedValue'",function(){var e={id:ko.observable(1)},t={id:ko.observable(2)},n={value:1,choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='radio' data-bind='checkedValue:id, checked:$parent.value' /></div>",ko.applyBindings(n,testNode),expect(n.value).toEqual(1),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),e.id(3),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(4),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(3),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0)})}),describe("'value' treated like 'checkedValue' when used with 'checked'.",function(){it("When a 'value' is specified, should use that as the checkbox value in the array",function(){var e={myArray:ko.observableArray([1,3])};testNode.innerHTML="<input type='checkbox' data-bind='checked:myArray, value:1' /><input value='off' type='checkbox' data-bind='checked:myArray, value:2' />",ko.applyBindings(e,testNode),expect(e.myArray()).toEqual([1,3]),expect(testNode.childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[1].checked).toEqual(!1),expect(testNode.childNodes[0].value).toEqual("1"),expect(testNode.childNodes[1].value).toEqual("2"),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!0),expect(e.myArray()).toEqual([1,3,2]),ko.utils.triggerEvent(testNode.childNodes[1],"click"),expect(testNode.childNodes[1].checked).toEqual(!1),expect(e.myArray()).toEqual([1,3]),e.myArray.push(2),expect(testNode.childNodes[1].checked).toEqual(!0),e.myArray.remove(1),expect(testNode.childNodes[0].checked).toEqual(!1)}),it("Should be able to use objects as value of checkboxes using 'value'",function(){var e={x:1},t={y:1},n={values:[e],choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='checkbox' data-bind='checked:$parent.values, value:$data' /></div>",ko.applyBindings(n,testNode),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[1],"click"),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0),expect(n.values).toEqual([e,t]),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[1],"click"),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),expect(n.values).toEqual([e])}),it("Should be able to use observables as value of checkboxes using 'value'",function(){var e={id:ko.observable(1)},t={id:ko.observable(2)},n={values:[1],choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='checkbox' data-bind='value:id, checked:$parent.values' /></div>",ko.applyBindings(n,testNode),expect(n.values).toEqual([1]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),e.id(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),expect(n.values).toEqual([3]),t.id(4),expect(n.values).toEqual([3]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(3),expect(n.values).toEqual([3]),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0)}),it("When a 'value' is specified, should use that as the radio button's value",function(){var e=ko.observable(!1);testNode.innerHTML="<input type='radio' data-bind='checked:someProp, value:true' /><input type='radio' data-bind='checked:someProp, value:false' />",ko.applyBindings({someProp:e},testNode),expect(e()).toEqual(!1),expect(testNode.childNodes[0].checked).toEqual(!1),expect(testNode.childNodes[1].checked).toEqual(!0),e(!0),expect(testNode.childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[1].checked).toEqual(!1),testNode.childNodes[1].click(),expect(e()).toEqual(!1),expect(testNode.childNodes[0].checked).toEqual(!1),expect(testNode.childNodes[1].checked).toEqual(!0)}),it("When node is removed, subscription to observable bound to 'value' is disposed",function(){var e={values:[1],checkedValue:ko.observable(1)};testNode.innerHTML="<input type='checkbox' data-bind='value:checkedValue, checked:values' />",ko.applyBindings(e,testNode),expect(e.values).toEqual([1]),expect(testNode.childNodes[0].checked).toEqual(!0),expect(e.checkedValue.getSubscriptionsCount()).toBeGreaterThan(0),ko.removeNode(testNode.childNodes[0]),expect(e.checkedValue.getSubscriptionsCount()).toEqual(0)}),it("Should be able to use observables as value of radio buttons using 'value'",function(){var e={id:ko.observable(1)},t={id:ko.observable(2)},n={value:1,choices:[e,t]};testNode.innerHTML="<div data-bind='foreach: choices'><input type='radio' data-bind='value:id, checked:$parent.value' /></div>",ko.applyBindings(n,testNode),expect(n.value).toEqual(1),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),e.id(3),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(4),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!1),t.id(3),expect(n.value).toEqual(3),expect(testNode.childNodes[0].childNodes[0].checked).toEqual(!0),expect(testNode.childNodes[0].childNodes[1].checked).toEqual(!0)})})})}.call(e),t})})(this);