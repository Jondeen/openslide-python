(function(e){var t;define([],function(){return function(){describe("Binding: Event",function(){beforeEach(jasmine.prepareTestNode),it("Should invoke the supplied function when the event occurs, using model as 'this' param and first arg, and event as second arg",function(){var e={firstWasCalled:!1,firstHandler:function(t,n){expect(n.type).toEqual("click"),expect(this).toEqual(e),expect(t).toEqual(e),expect(e.firstWasCalled).toEqual(!1),e.firstWasCalled=!0},secondWasCalled:!1,secondHandler:function(t,n){expect(n.type).toEqual("mouseover"),expect(this).toEqual(e),expect(t).toEqual(e),expect(e.secondWasCalled).toEqual(!1),e.secondWasCalled=!0}};testNode.innerHTML="<button data-bind='event:{click:firstHandler, mouseover:secondHandler, mouseout:null}'>hey</button>",ko.applyBindings(e,testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click"),expect(e.firstWasCalled).toEqual(!0),expect(e.secondWasCalled).toEqual(!1),ko.utils.triggerEvent(testNode.childNodes[0],"mouseover"),expect(e.secondWasCalled).toEqual(!0),ko.utils.triggerEvent(testNode.childNodes[0],"mouseout")}),it("Should prevent default action",function(){testNode.innerHTML="<a href='http://www.example.com/' data-bind='event: { click: function() { } }'>hey</button>",ko.applyBindings(null,testNode),ko.utils.triggerEvent(testNode.childNodes[0],"click")}),it("Should let bubblable events bubble to parent elements by default",function(){var e={innerWasCalled:!1,innerDoCall:function(){this.innerWasCalled=!0},outerWasCalled:!1,outerDoCall:function(){this.outerWasCalled=!0}};testNode.innerHTML="<div data-bind='event:{click:outerDoCall}'><button data-bind='event:{click:innerDoCall}'>hey</button></div>",ko.applyBindings(e,testNode),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[0],"click"),expect(e.innerWasCalled).toEqual(!0),expect(e.outerWasCalled).toEqual(!0)}),it("Should be able to prevent bubbling of bubblable events using the (eventname)Bubble:false option",function(){var e={innerWasCalled:!1,innerDoCall:function(){this.innerWasCalled=!0},outerWasCalled:!1,outerDoCall:function(){this.outerWasCalled=!0}};testNode.innerHTML="<div data-bind='event:{click:outerDoCall}'><button data-bind='event:{click:innerDoCall}, clickBubble:false'>hey</button></div>",ko.applyBindings(e,testNode),ko.utils.triggerEvent(testNode.childNodes[0].childNodes[0],"click"),expect(e.innerWasCalled).toEqual(!0),expect(e.outerWasCalled).toEqual(!1)}),it('Should be able to supply handler params using "bind" helper',function(){var e=!1,t={},n=function(){expect(this).toEqual(t),expect(arguments.length).toEqual(5),expect(arguments[0]).toEqual(123),expect(arguments[1]).toEqual("another"),expect(arguments[2].something).toEqual(!0),expect(arguments[3]).toEqual(r),expect(arguments[4].type).toEqual("mouseover"),e=!0};testNode.innerHTML="<button data-bind='event:{ mouseover: myHandler.bind(someObj, 123, \"another\", { something: true }) }'>hey</button>";var r={myHandler:n,someObj:t};ko.applyBindings(r,testNode),ko.utils.triggerEvent(testNode.childNodes[0],"mouseover"),expect(e).toEqual(!0)})})}.call(e),t})})(this);