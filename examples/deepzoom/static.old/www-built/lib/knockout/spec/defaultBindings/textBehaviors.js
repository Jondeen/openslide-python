(function(e){var t;define([],function(){return function(){describe("Binding: Text",function(){beforeEach(jasmine.prepareTestNode),it("Should assign the value to the node, HTML-encoding the value",function(){var e={textProp:"'Val <with> \"special\" <i>characters</i>'"};testNode.innerHTML="<span data-bind='text:textProp'></span>",ko.applyBindings(e,testNode),expect(testNode.childNodes[0].textContent||testNode.childNodes[0].innerText).toEqual(e.textProp)}),it("Should assign an empty string as value if the model value is null",function(){testNode.innerHTML="<span data-bind='text:(null)' ></span>",ko.applyBindings(null,testNode);var e="textContent"in testNode.childNodes[0]?testNode.childNodes[0].textContent:testNode.childNodes[0].innerText;expect(e).toEqual("")}),it("Should assign an empty string as value if the model value is undefined",function(){testNode.innerHTML="<span data-bind='text:undefined' ></span>",ko.applyBindings(null,testNode);var e="textContent"in testNode.childNodes[0]?testNode.childNodes[0].textContent:testNode.childNodes[0].innerText;expect(e).toEqual("")}),it("Should work with virtual elements, adding a text node between the comments",function(){var e=ko.observable("Some text");testNode.innerHTML="xxx <!-- ko text: textProp --><!-- /ko -->",ko.applyBindings({textProp:e},testNode),expect(testNode).toContainText("xxx Some text"),expect(testNode).toContainHtml("xxx <!-- ko text: textprop -->some text<!-- /ko -->"),e("New text"),expect(testNode).toContainText("xxx New text"),expect(testNode).toContainHtml("xxx <!-- ko text: textprop -->new text<!-- /ko -->"),e(undefined),expect(testNode).toContainText("xxx "),expect(testNode).toContainHtml("xxx <!-- ko text: textprop --><!-- /ko -->")}),it("Should work with virtual elements, removing any existing stuff between the comments",function(){testNode.innerHTML="xxx <!--ko text: undefined-->some random thing<span> that won't be here later</span><!--/ko-->",ko.applyBindings(null,testNode),expect(testNode).toContainText("xxx "),expect(testNode).toContainHtml("xxx <!--ko text: undefined--><!--/ko-->")}),it("Should not attempt data binding on the generated text node",function(){this.restoreAfter(ko.bindingProvider,"instance");var e=ko.bindingProvider.instance;ko.bindingProvider.instance={nodeHasBindings:function(e,t){return!0},getBindingAccessors:function(t,n){return t.nodeType===3?{replaceTextNodeContent:function(){return"should not see this value in the output"}}:e.getBindingAccessors(t,n)}},ko.bindingHandlers.replaceTextNodeContent={update:function(e,t){e.data=t()}},testNode.innerHTML="<span data-bind='text: sometext'></span>",ko.applyBindings({sometext:"hello"},testNode),expect("textContent"in testNode?testNode.textContent:testNode.innerText).toEqual("hello")})})}.call(e),t})})(this);