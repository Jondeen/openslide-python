(function(e){var t;define([],function(){return function(){describe("Binding: Ifnot",function(){beforeEach(jasmine.prepareTestNode),it("Should remove descendant nodes from the document (and not bind them) if the value is truey",function(){testNode.innerHTML="<div data-bind='ifnot: condition'><span data-bind='text: someItem.nonExistentChildProp'></span></div>",expect(testNode.childNodes[0].childNodes.length).toEqual(1),ko.applyBindings({someItem:null,condition:!0},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(0)}),it("Should leave descendant nodes in the document (and bind them) if the value is falsey, independently of the active template engine",function(){this.after(function(){ko.setTemplateEngine(new ko.nativeTemplateEngine)}),ko.setTemplateEngine(new ko.templateEngine),testNode.innerHTML="<div data-bind='ifnot: condition'><span data-bind='text: someItem.existentChildProp'></span></div>",expect(testNode.childNodes.length).toEqual(1),ko.applyBindings({someItem:{existentChildProp:"Child prop value"},condition:!1},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(1),expect(testNode.childNodes[0].childNodes[0]).toContainText("Child prop value")}),it("Should leave descendant nodes unchanged if the value is falsey and remains falsey when changed",function(){var e=ko.observable(!1);testNode.innerHTML="<div data-bind='ifnot: someItem'><span data-bind='text: someItem()'></span></div>";var t=testNode.childNodes[0].childNodes[0];ko.applyBindings({someItem:e},testNode),expect(testNode.childNodes[0].childNodes[0]).toContainText("false"),expect(testNode.childNodes[0].childNodes[0]).toEqual(t),e(0),expect(testNode.childNodes[0].childNodes[0]).toContainText("0"),expect(testNode.childNodes[0].childNodes[0]).toEqual(t)}),it("Should toggle the presence and bindedness of descendant nodes according to the falsiness of the value",function(){var e=ko.observable(undefined),t=ko.observable(!0);testNode.innerHTML="<div data-bind='ifnot: condition'><span data-bind='text: someItem().occasionallyExistentChildProp'></span></div>",ko.applyBindings({someItem:e,condition:t},testNode),expect(testNode.childNodes[0].childNodes.length).toEqual(0),e({occasionallyExistentChildProp:"Child prop value"}),t(!1),expect(testNode.childNodes[0].childNodes.length).toEqual(1),expect(testNode.childNodes[0].childNodes[0]).toContainText("Child prop value"),t(!0),e(null),expect(testNode.childNodes[0].childNodes.length).toEqual(0)}),it("Should not interfere with binding context",function(){testNode.innerHTML="<div data-bind='ifnot: false'>Parents: <span data-bind='text: $parents.length'></span></div>",ko.applyBindings({},testNode),expect(testNode.childNodes[0]).toContainText("Parents: 0"),expect(ko.contextFor(testNode.childNodes[0].childNodes[1]).$parents.length).toEqual(0)})})}.call(e),t})})(this);