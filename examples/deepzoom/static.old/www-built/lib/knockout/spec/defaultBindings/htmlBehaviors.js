(function(e){var t;define([],function(){return function(){describe("Binding: HTML",function(){beforeEach(jasmine.prepareTestNode),it("Should assign the value to the node without HTML-encoding the value",function(){var e={textProp:"My <span>HTML-containing</span> value"};testNode.innerHTML="<span data-bind='html:textProp'></span>",ko.applyBindings(e,testNode),expect(testNode.childNodes[0].innerHTML.toLowerCase()).toEqual(e.textProp.toLowerCase()),expect(testNode.childNodes[0].childNodes[1].innerHTML).toEqual("HTML-containing")}),it("Should assign an empty string as value if the model value is null",function(){testNode.innerHTML="<span data-bind='html:(null)' ></span>",ko.applyBindings(null,testNode),expect(testNode.childNodes[0].innerHTML).toEqual("")}),it("Should assign an empty string as value if the model value is undefined",function(){testNode.innerHTML="<span data-bind='html:undefined' ></span>",ko.applyBindings(null,testNode),expect(testNode.childNodes[0].innerHTML).toEqual("")}),it("Should be able to write arbitrary HTML, even if it is not semantically correct",function(){var e={textProp:"<p>hello</p><p>this isn't semantically correct</p>"};testNode.innerHTML="<p data-bind='html:textProp'></p>",ko.applyBindings(e,testNode),expect(testNode.childNodes[0]).toContainHtml(e.textProp)}),it("Should be able to write arbitrary HTML, including <tr> elements into tables",function(){var e={textProp:"<tr><td>hello</td></tr>"};testNode.innerHTML="<table data-bind='html:textProp'></table>",ko.applyBindings(e,testNode);var t=testNode.childNodes[0].childNodes[0];t.tagName=="TBODY"&&(t=t.childNodes[0]);var n=t.childNodes[0];expect(t.tagName).toEqual("TR"),expect(n.tagName).toEqual("TD"),expect("innerText"in n?n.innerText:n.textContent).toEqual("hello")})})}.call(e),t})})(this);