(function(e){var t;define([],function(){return function(){describe("Binding: Selected Options",function(){beforeEach(jasmine.prepareTestNode),it("Should only be applicable to SELECT nodes",function(){var e=!1;testNode.innerHTML="<input data-bind='selectedOptions:[]' />";try{ko.applyBindings({},testNode)}catch(t){e=!0}expect(e).toEqual(!0)}),it("Should set selection in the SELECT node to match the model",function(){var e={},t=new ko.observableArray(["A",e,"C"]),n=new ko.observableArray([e]);testNode.innerHTML="<select multiple='multiple' data-bind='options:myValues, selectedOptions:mySelection'></select>",ko.applyBindings({myValues:t,mySelection:n},testNode),expect(testNode.childNodes[0]).toHaveSelectedValues([e]),n.push("C"),expect(testNode.childNodes[0]).toHaveSelectedValues([e,"C"])}),it("Should update the model when selection in the SELECT node changes",function(){function e(e,t){/MSIE 6/i.test(navigator.userAgent)?e.setAttribute("selected",t):e.selected=t}var t={},n=new ko.observableArray(["A","B",t]),r=new ko.observableArray(["B"]);testNode.innerHTML="<select multiple='multiple' data-bind='options:myValues, selectedOptions:mySelection'></select>",ko.applyBindings({myValues:n,mySelection:r},testNode),expect(r()).toEqual(["B"]),e(testNode.childNodes[0].childNodes[0],!0),e(testNode.childNodes[0].childNodes[1],!1),e(testNode.childNodes[0].childNodes[2],!0),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(r()).toEqual(["A",t]),expect(r()[1]===t).toEqual(!0)}),it("Should update the model when selection in the SELECT node changes for non-observable property values",function(){function e(e,t){/MSIE 6/i.test(navigator.userAgent)?e.setAttribute("selected",t):e.selected=t}var t={},n=new ko.observableArray(["A","B",t]),r=["B"],i={myValues:n,mySelection:r};testNode.innerHTML="<select multiple='multiple' data-bind='options:myValues, selectedOptions:mySelection'></select>",ko.applyBindings(i,testNode),expect(i.mySelection).toEqual(["B"]),e(testNode.childNodes[0].childNodes[0],!0),e(testNode.childNodes[0].childNodes[1],!1),e(testNode.childNodes[0].childNodes[2],!0),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(i.mySelection).toEqual(["A",t]),expect(i.mySelection[1]===t).toEqual(!0)}),it("Should update the model when selection in the SELECT node inside an optgroup changes",function(){function e(e,t){/MSIE 6/i.test(navigator.userAgent)?e.setAttribute("selected",t):e.selected=t}var t=new ko.observableArray([]);testNode.innerHTML="<select multiple='multiple' data-bind='selectedOptions:mySelection'><optgroup label='group'><option value='a'>a-text</option><option value='b'>b-text</option><option value='c'>c-text</option></optgroup></select>",ko.applyBindings({mySelection:t},testNode),expect(t()).toEqual([]),e(testNode.childNodes[0].childNodes[0].childNodes[0],!0),e(testNode.childNodes[0].childNodes[0].childNodes[1],!1),e(testNode.childNodes[0].childNodes[0].childNodes[2],!0),ko.utils.triggerEvent(testNode.childNodes[0],"change"),expect(t()).toEqual(["a","c"])}),it("Should set selection in the SELECT node inside an optgroup to match the model",function(){var e=new ko.observableArray(["a"]);testNode.innerHTML="<select multiple='multiple' data-bind='selectedOptions:mySelection'><optgroup label='group'><option value='a'>a-text</option><option value='b'>b-text</option><option value='c'>c-text</option></optgroup><optgroup label='group2'><option value='d'>d-text</option></optgroup></select>",ko.applyBindings({mySelection:e},testNode),expect(testNode.childNodes[0].childNodes[0]).toHaveSelectedValues(["a"]),expect(testNode.childNodes[0].childNodes[1]).toHaveSelectedValues([]),e.push("c"),expect(testNode.childNodes[0].childNodes[0]).toHaveSelectedValues(["a","c"]),expect(testNode.childNodes[0].childNodes[1]).toHaveSelectedValues([]),e.push("d"),expect(testNode.childNodes[0].childNodes[0]).toHaveSelectedValues(["a","c"]),expect(testNode.childNodes[0].childNodes[1]).toHaveSelectedValues(["d"])})})}.call(e),t})})(this);