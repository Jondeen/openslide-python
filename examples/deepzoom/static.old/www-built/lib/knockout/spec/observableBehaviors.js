(function(e){var t;define([],function(){return function(){describe("Observable",function(){it("Should be subscribable",function(){var e=new ko.observable;expect(ko.isSubscribable(e)).toEqual(!0)}),it("Should advertise that instances are observable",function(){var e=new ko.observable;expect(ko.isObservable(e)).toEqual(!0)}),it("Should be able to write values to it",function(){var e=new ko.observable;e(123)}),it("Should be able to write to multiple observable properties on a model object using chaining syntax",function(){var e={prop1:new ko.observable,prop2:new ko.observable};e.prop1("A").prop2("B"),expect(e.prop1()).toEqual("A"),expect(e.prop2()).toEqual("B")}),it("Should be able to use Function.prototype methods to access/update",function(){var e=ko.observable("A"),t={};expect(e.call(null)).toEqual("A"),expect(e.call(t,"B")).toBe(t),expect(e.apply(null,[])).toBe("B")}),it("Should advertise that instances can have values written to them",function(){var e=new ko.observable(function(){});expect(ko.isWriteableObservable(e)).toEqual(!0),expect(ko.isWritableObservable(e)).toEqual(!0)}),it("Should be able to read back most recent value",function(){var e=new ko.observable;e(123),e(234),expect(e()).toEqual(234)}),it("Should initially have undefined value",function(){var e=new ko.observable;expect(e()).toEqual(undefined)}),it("Should be able to set initial value as constructor param",function(){var e=new ko.observable("Hi!");expect(e()).toEqual("Hi!")}),it("Should notify subscribers about each new value",function(){var e=new ko.observable,t=[];e.subscribe(function(e){t.push(e)}),e("A"),e("B"),expect(t.length).toEqual(2),expect(t[0]).toEqual("A"),expect(t[1]).toEqual("B")}),it("Should be able to tell it that its value has mutated, at which point it notifies subscribers",function(){var e=new ko.observable,t=[];e.subscribe(function(e){t.push(e.childProperty)});var n={childProperty:"A"};e(n),expect(t.length).toEqual(1),expect(t[0]).toEqual("A"),n.childProperty="B",e.valueHasMutated(),expect(t.length).toEqual(2),expect(t[1]).toEqual("B")}),it('Should notify "beforeChange" subscribers before each new value',function(){var e=new ko.observable,t=[];e.subscribe(function(e){t.push(e)},null,"beforeChange"),e("A"),e("B"),expect(t.length).toEqual(2),expect(t[0]).toEqual(undefined),expect(t[1]).toEqual("A")}),it('Should be able to tell it that its value will mutate, at which point it notifies "beforeChange" subscribers',function(){var e=new ko.observable,t=[];e.subscribe(function(e){t.push(e?e.childProperty:e)},null,"beforeChange");var n={childProperty:"A"};e(n),expect(t.length).toEqual(1),expect(t[0]).toEqual(undefined),e.valueWillMutate(),expect(t.length).toEqual(2),expect(t[1]).toEqual("A"),n.childProperty="B",e.valueHasMutated(),expect(t.length).toEqual(2),expect(t[1]).toEqual("A")}),it("Should ignore writes when the new value is primitive and strictly equals the old value",function(){var e=new ko.observable,t=[];e.subscribe(t.push,t);for(var n=0;n<3;n++)e("A"),expect(e()).toEqual("A"),expect(t).toEqual(["A"]);e("B"),expect(e()).toEqual("B"),expect(t).toEqual(["A","B"])}),it("Should ignore writes when both the old and new values are strictly null",function(){var e=new ko.observable(null),t=[];e.subscribe(t.push,t),e(null),expect(t).toEqual([])}),it("Should ignore writes when both the old and new values are strictly undefined",function(){var e=new ko.observable(undefined),t=[];e.subscribe(t.push,t),e(undefined),expect(t).toEqual([])}),it("Should notify subscribers of a change when an object value is written, even if it is identical to the old value",function(){var e={},t=new ko.observable(e),n=[];t.subscribe(n.push,n),t(e),expect(n).toEqual([e])}),it("Should notify subscribers of a change even when an identical primitive is written if you've set the equality comparer to null",function(){var e=new ko.observable("A"),t=[];e.subscribe(t.push,t),e("A"),expect(t).toEqual([]),e.equalityComparer=null,e("A"),expect(t).toEqual(["A"])}),it("Should ignore writes when the equalityComparer callback states that the values are equal",function(){var e=new ko.observable;e.equalityComparer=function(e,t){return!e||!t?e===t:e.id==t.id};var t=[];e.subscribe(t.push,t),e({id:1}),expect(t.length).toEqual(1),e({id:1,ignoredProp:"abc"}),expect(t.length).toEqual(1),e({id:2,ignoredProp:"abc"}),expect(t.length).toEqual(2),e(null),expect(t.length).toEqual(3),e(null),expect(t.length).toEqual(3),e(undefined),expect(t.length).toEqual(4),e({id:1}),expect(t.length).toEqual(5)}),it('Should expose a "notify" extender that can configure the observable to notify on all writes, even if the value is unchanged',function(){var e=new ko.observable,t=[];e.subscribe(t.push,t),e(123),expect(t.length).toEqual(1),e(123),expect(t.length).toEqual(1),e.extend({notify:"always"}),e(123),expect(t.length).toEqual(2),e.extend({notify:null}),e(123),expect(t.length).toEqual(2)}),it("Should be possible to replace notifySubscribers with a custom handler",function(){var e=new ko.observable(123),t=[];e.subscribe(function(){throw new Error("Should not notify subscribers by default once notifySubscribers is overridden")}),e.notifySubscribers=function(e,n){t.push({eventName:n||"None",value:e})},e(456),expect(t.length).toEqual(2),expect(t[0].eventName).toEqual("beforeChange"),expect(t[1].eventName).toEqual("None"),expect(t[0].value).toEqual(123),expect(t[1].value).toEqual(456)}),it("Should inherit any properties defined on ko.subscribable.fn or ko.observable.fn",function(){this.after(function(){delete ko.subscribable.fn.customProp,delete ko.subscribable.fn.customFunc,delete ko.observable.fn.customFunc}),ko.subscribable.fn.customProp="subscribable value",ko.subscribable.fn.customFunc=function(){throw new Error("Shouldn't be reachable")},ko.observable.fn.customFunc=function(){return this()};var e=ko.observable(123);expect(e.customProp).toEqual("subscribable value"),expect(e.customFunc()).toEqual(123)}),it('Should have access to functions added to "fn" on existing instances on supported browsers',function(){if(!jasmine.browserSupportsProtoAssignment)return;this.after(function(){delete ko.subscribable.fn.customFunction1,delete ko.observable.fn.customFunction2});var e=ko.observable(),t=function(){},n=function(){};ko.subscribable.fn.customFunction1=t,ko.observable.fn.customFunction2=n,expect(e.customFunction1).toBe(t),expect(e.customFunction2).toBe(n)})})}.call(e),t})})(this);