(function(e){var t;define([],function(){return function(){describe("Throttled observables",function(){beforeEach(function(){waits(1)}),it("Should notify subscribers asynchronously after writes stop for the specified timeout duration",function(){var e=ko.observable("A").extend({throttle:100}),t=[];e.subscribe(function(e){t.push(e)}),runs(function(){e("B"),e("C"),e("D"),expect(t.length).toEqual(0)}),waits(10),runs(function(){e("E"),e("F"),expect(t.length).toEqual(0)}),waitsFor(function(){return t.length>0},300),runs(function(){expect(t.length).toEqual(1),expect(t[0]).toEqual("F")})})}),describe("Throttled dependent observables",function(){beforeEach(function(){waits(1)}),it("Should notify subscribers asynchronously after dependencies stop updating for the specified timeout duration",function(){var e=ko.observable(),t=ko.dependentObservable(function(){return e()}).extend({throttle:100}),n=[];t.subscribe(function(e){n.push(e)}),expect(t()).toBeUndefined(),runs(function(){e("New value"),expect(t()).toBeUndefined(),expect(n.length).toEqual(0)}),waits(10),runs(function(){expect(t()).toBeUndefined(),expect(n.length).toEqual(0)}),waitsFor(function(){return n.length>0},300),runs(function(){expect(t()).toEqual("New value"),expect(n.length).toEqual(1),expect(n[0]).toEqual("New value")})}),it("Should run evaluator only once when dependencies stop updating for the specified timeout duration",function(){var e=0,t=ko.observable(),n=ko.dependentObservable(function(){return e++,t()}).extend({throttle:100});runs(function(){expect(e).toEqual(1),t("A"),t("B"),t("C"),expect(e).toEqual(1)}),waits(10),runs(function(){t("D"),expect(e).toEqual(1)}),waitsFor(function(){return e>1},300),runs(function(){expect(e).toEqual(2),expect(n()).toEqual("D")})})}),describe("Rate-limited",function(){beforeEach(function(){jasmine.Clock.useMock()}),describe("Subscribable",function(){it("Should delay change notifications",function(){var e=(new ko.subscribable).extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t),e.subscribe(t,null,"custom"),e.notifySubscribers("a","change"),expect(t).not.toHaveBeenCalled(),e.notifySubscribers("b"),expect(t).not.toHaveBeenCalled(),e.notifySubscribers("c","custom"),expect(t).toHaveBeenCalledWith("c"),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b")}),it("Should notify every timeout interval using notifyAtFixedRate method ",function(){var e=(new ko.subscribable).extend({rateLimit:{method:"notifyAtFixedRate",timeout:50}}),t=jasmine.createSpy("notifySpy");e.subscribe(t);for(var n=0;n<10;++n)e.notifySubscribers(n+1),jasmine.Clock.tick(25);expect(t.calls.length).toBe(5),expect(t.argsForCall).toEqual([[2],[4],[6],[8],[10]]),t.reset(),jasmine.Clock.tick(50),expect(t).not.toHaveBeenCalled()}),it("Should notify after nothing happens for the timeout period using notifyWhenChangesStop method",function(){var e=(new ko.subscribable).extend({rateLimit:{method:"notifyWhenChangesStop",timeout:50}}),t=jasmine.createSpy("notifySpy");e.subscribe(t);for(var n=0;n<10;++n)e.notifySubscribers(n+1),jasmine.Clock.tick(25);expect(t).not.toHaveBeenCalled(),jasmine.Clock.tick(50),expect(t.calls.length).toBe(1),expect(t).toHaveBeenCalledWith(10)}),it("Should use latest settings when applied multiple times",function(){var e=(new ko.subscribable).extend({rateLimit:250}).extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t),e.notifySubscribers("a"),jasmine.Clock.tick(250),expect(t).not.toHaveBeenCalled(),jasmine.Clock.tick(250),expect(t).toHaveBeenCalledWith("a")}),it("Uses latest settings for future notification and previous settings for pending notificaiton",function(){var e=(new ko.subscribable).extend({rateLimit:250}),t=jasmine.createSpy("notifySpy");e.subscribe(t),e.notifySubscribers("a"),e=e.extend({rateLimit:500}),e.notifySubscribers("b"),jasmine.Clock.tick(250),expect(t).toHaveBeenCalledWith("a"),t.reset(),jasmine.Clock.tick(250),expect(t).toHaveBeenCalledWith("b")})}),describe("Observable",function(){it("Should delay change notifications",function(){var e=ko.observable().extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t);var n=jasmine.createSpy("beforeChangeSpy").andCallFake(function(t){expect(e()).toBe(t)});e.subscribe(n,null,"beforeChange"),e("a"),expect(e()).toEqual("a"),expect(t).not.toHaveBeenCalled(),expect(n).toHaveBeenCalledWith(undefined),e("b"),expect(t).not.toHaveBeenCalled(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b"),expect(n.calls.length).toBe(1)}),it("Should suppress change notification when value is changed/reverted",function(){var e=ko.observable("original").extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t);var n=jasmine.createSpy("beforeChangeSpy");e.subscribe(n,null,"beforeChange"),e("new"),expect(e()).toEqual("new"),e("original"),expect(t).not.toHaveBeenCalled(),jasmine.Clock.tick(500),expect(t).not.toHaveBeenCalled(),expect(e()).toEqual("original"),expect(t).not.toHaveBeenCalled(),e("new"),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("new"),expect(n).toHaveBeenCalledWith("original"),expect(n).not.toHaveBeenCalledWith("new")}),it("Should support notifications from nested update",function(){var e=ko.observable("a").extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t);var n=e.subscribe(function(){n.dispose(),e("z")});e("b"),expect(t).not.toHaveBeenCalled(),expect(e()).toEqual("b"),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b"),expect(e()).toEqual("z"),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("z")}),it("Should suppress notifications when value is changed/reverted from nested update",function(){var e=ko.observable("a").extend({rateLimit:500}),t=jasmine.createSpy("notifySpy");e.subscribe(t);var n=e.subscribe(function(t){n.dispose(),e("z"),e(t)});e("b"),expect(t).not.toHaveBeenCalled(),expect(e()).toEqual("b"),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b"),expect(e()).toEqual("b"),t.reset(),jasmine.Clock.tick(500),expect(t).not.toHaveBeenCalled()}),it("Should delay update of dependent computed observable",function(){var e=ko.observable().extend({rateLimit:500}),t=ko.computed(e);expect(t()).toBeUndefined(),e("a"),expect(e()).toEqual("a"),expect(t()).toBeUndefined(),e("b"),expect(t()).toBeUndefined(),jasmine.Clock.tick(500),expect(t()).toEqual("b")}),it("Should delay update of dependent pure computed observable",function(){var e=ko.observable().extend({rateLimit:500}),t=ko.pureComputed(e);expect(t()).toBeUndefined(),e("a"),expect(e()).toEqual("a"),expect(t()).toBeUndefined(),e("b"),expect(t()).toBeUndefined(),jasmine.Clock.tick(500),expect(t()).toEqual("b")})}),describe("Observable Array change tracking",function(){it("Should provide correct changelist when multiple updates are merged into one notification",function(){var e=ko.observableArray(["Alpha","Beta"]).extend({rateLimit:1}),t;e.subscribe(function(e){t=e},null,"arrayChange"),e.push("Gamma"),e.push("Delta"),jasmine.Clock.tick(10),expect(t).toEqual([{status:"added",value:"Gamma",index:2},{status:"added",value:"Delta",index:3}]),t=undefined,e.shift(),e.shift(),jasmine.Clock.tick(10),expect(t).toEqual([{status:"deleted",value:"Alpha",index:0},{status:"deleted",value:"Beta",index:1}]),t=undefined,e.push("Epsilon"),e.pop(),jasmine.Clock.tick(10),expect(t).toEqual(undefined)})}),describe("Computed Observable",function(){it("Should delay running evaluator where there are no subscribers",function(){var e=ko.observable(),t=jasmine.createSpy("evalSpy"),n=ko.computed(function(){return t(e()),e()}).extend({rateLimit:500});t.reset(),e("a"),e("b"),expect(t).not.toHaveBeenCalled(),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b")}),it("Should delay change notifications and evaluation",function(){var e=ko.observable(),t=jasmine.createSpy("evalSpy"),n=ko.computed(function(){return t(e()),e()}).extend({rateLimit:500}),r=jasmine.createSpy("notifySpy");n.subscribe(r);var i=jasmine.createSpy("beforeChangeSpy").andCallFake(function(e){expect(n()).toBe(e)});n.subscribe(i,null,"beforeChange"),t.reset(),e("a"),expect(t).not.toHaveBeenCalled(),expect(n()).toEqual("a"),expect(t).toHaveBeenCalledWith("a"),expect(r).not.toHaveBeenCalled(),expect(i).toHaveBeenCalledWith(undefined),t.reset(),e("b"),expect(n.peek()).toEqual("a"),expect(t).not.toHaveBeenCalled(),expect(r).not.toHaveBeenCalled(),t.reset(),jasmine.Clock.tick(500),expect(t).toHaveBeenCalledWith("b"),expect(r).toHaveBeenCalledWith("b"),expect(i.calls.length).toBe(1)}),it("Should run initial evaluation at first subscribe when using deferEvaluation",function(){var e=ko.observable("a"),t=jasmine.createSpy("evalSpy"),n=ko.computed({read:function(){return t(e()),e()},deferEvaluation:!0}).extend({rateLimit:500});expect(t).not.toHaveBeenCalled();var r=jasmine.createSpy("notifySpy");n.subscribe(r),expect(t).toHaveBeenCalledWith("a"),expect(r).not.toHaveBeenCalled()}),it("Should run initial evaluation when observable is accessed when using deferEvaluation",function(){var e=ko.observable("a"),t=jasmine.createSpy("evalSpy"),n=ko.computed({read:function(){return t(e()),e()},deferEvaluation:!0}).extend({rateLimit:500});expect(t).not.toHaveBeenCalled(),expect(n()).toEqual("a"),expect(t).toHaveBeenCalledWith("a")}),it("Should suppress change notifications when value is changed/reverted",function(){var e=ko.observable("original"),t=ko.computed(function(){return e()}).extend({rateLimit:500}),n=jasmine.createSpy("notifySpy");t.subscribe(n);var r=jasmine.createSpy("beforeChangeSpy");t.subscribe(r,null,"beforeChange"),e("new"),expect(t()).toEqual("new"),e("original"),expect(n).not.toHaveBeenCalled(),jasmine.Clock.tick(500),expect(n).not.toHaveBeenCalled(),expect(t()).toEqual("original"),expect(n).not.toHaveBeenCalled(),e("new"),jasmine.Clock.tick(500),expect(n).toHaveBeenCalledWith("new"),expect(r).toHaveBeenCalledWith("original"),expect(r).not.toHaveBeenCalledWith("new")}),it("Should not re-evaluate if computed is disposed before timeout",function(){var e=ko.observable("a"),t=jasmine.createSpy("evalSpy"),n=ko.computed(function(){return t(e()),e()}).extend({rateLimit:500});expect(n()).toEqual("a"),expect(t.calls.length).toBe(1),expect(t).toHaveBeenCalledWith("a"),t.reset(),e("b"),n.dispose(),jasmine.Clock.tick(500),expect(n()).toEqual("a"),expect(t).not.toHaveBeenCalled()}),it("Should be able to re-evaluate a computed that previously threw an exception",function(){var e=ko.observable(!0),t=ko.observable(1),n=ko.computed(function(){if(!e())throw Error("Error during computed evaluation");return t()}).extend({rateLimit:500});expect(n()).toEqual(1),expect(function(){e(!1),n()}).toThrow("Error during computed evaluation"),expect(n()).toEqual(1),expect(n.getDependenciesCount()).toEqual(1),t(2),expect(n()).toEqual(1),e(1),expect(n()).toEqual(2)}),it("Should delay update of dependent computed observable",function(){var e=ko.observable(),t=ko.computed(e).extend({rateLimit:500}),n=ko.computed(t);expect(n()).toBeUndefined(),e("a"),expect(t()).toEqual("a"),expect(n()).toBeUndefined(),e("b"),expect(n()).toBeUndefined(),jasmine.Clock.tick(500),expect(n()).toEqual("b")}),it("Should delay update of dependent pure computed observable",function(){var e=ko.observable(),t=ko.computed(e).extend({rateLimit:500}),n=ko.pureComputed(t);expect(n()).toBeUndefined(),e("a"),expect(t()).toEqual("a"),expect(n()).toBeUndefined(),e("b"),expect(n()).toBeUndefined(),jasmine.Clock.tick(500),expect(n()).toEqual("b")})})})}.call(e),t})})(this);